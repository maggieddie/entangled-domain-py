#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 81 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 57 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 56
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1
          0 2216 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"../../main.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 33 #"\"../../examples/list-helpers.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"; failed case"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 19 #"; (smt:new-context)"
0 0 4 29 1 #"\n"
0 0 17 3 47 #"; (smt:declare-fun f ((x!1 Int) (x!2 Bool)) Int"
0 0 4 29 1 #"\n"
0 0 17 3 61
#";                  (ite (and (= x!1 11) (= x!2 false)) 21 0))"
0 0 4 29 1 #"\n"
0 0 17 3 3 #"; )"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 40 #";   (smt:new-context #:print-success #t)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";    (smt:new-context #:macro-finder #t )"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";    (smt:define-fun maxmy ((a Int) (b Int)) Int "
0 0 4 29 1 #"\n"
0 0 17 3 45 #";                     (ite/s (>=/s a b) a b))"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";   ; (smt:assert (=/s (maxmy 4 7) 7)) "
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    (smt:declare-fun x () Int)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    (smt:declare-fun y () Int)"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";    (smt:assert (maxmy x x))"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";    (smt:check-sat)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";    ;(smt:get-model)"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";    ;(smt:eval p)"
0 0 4 29 1 #"\n"
0 0 17 3 6 #";    )"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";; the above example just crushes."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";    (smt:new-context #:macro-finder #t)"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";    (smt:define-fun greatThan10 ((a Int))  Bool "
0 0 4 29 1 #"\n"
0 0 17 3 33 #";                     (>/s a 10))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    (smt:declare-fun x () Int)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    (smt:declare-fun y () Int)"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";    (smt:assert (greatThan10 x))"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";    (smt:assert (greatThan10 y))"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";    (smt:check-sat)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";    (smt:get-model)"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 18 #";    ;(smt:eval p)"
0 0 4 29 1 #"\n"
0 0 17 3 6 #";    )"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; The above example passed"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";    (smt:new-context #:macro-finder #t )"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";    (smt:define-fun absolute ((x Int)) Int "
0 0 4 29 1 #"\n"
0 0 17 3 51 #";                     (ite/s (>=/s x 0) x (-/s x)))"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";    (smt:declare-fun a () (Array Int Int))"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";    (smt:assert (=/s (+/s"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";                    (select/s a 0)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 1)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 2)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 3)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 4)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";                   "
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 5)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 6)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 7)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 8)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";                   "
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 8)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";                   (select/s a 9)"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";                   (select/s a 10)"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";                   (select/s a 11)"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";                   (select/s a 12)"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";                   (select/s a 13))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";                   (- 0 13)))"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";    (smt:check-sat)"
0 0 4 29 1 #"\n"
0 0 17 3 6 #";    )"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 36 #"; the above example can work nicely."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";    (smt:new-context)"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";    (smt:declare-datatypes () ((Addr addr)))"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";    (smt:declare-fun equality-inequality (Addr Addr) Bool)"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";    ;; the equality relation"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";    (smt:assert (forall/s ((a Addr) (b Addr) (c Addr))"
0 0 4 29 1 #"\n"
0 0 17 3 88
(
 #";                        (=>/s (and (equality-inequality a b) (equal"
 #"ity-inequality b c))"
) 0 0 4 29 1 #"\n"
0 0 17 3 59
#";                              (equality-inequality a c))))"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    ;; the inequality relation"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";    (smt:assert (forall/s ((a Addr) (b Addr) (c Addr))"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";                          (=>/s (and (equality a b) (equality b c))"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";                                (equality a c))))"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 4 29 1 #"\n"
0 0 17 3 33 #";    (smt:declare-fun a1 () Addr)"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";    (smt:declare-fun a2 () Addr)"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";    (smt:declare-fun a3 () Addr)"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";    (smt:assert (=/s (equality-inequality a1 a2) #t))"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";    (smt:assert (=/s (equality-inequality a2 a3) #t))"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";    (smt:assert (equality-inequality a1 a3))"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";    (smt:check-sat))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 34 #";(define ns (make-base-namespace))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 71
(
 #";(namespace-set-variable-value! 'smt:declare-fun smt:declare-fun #f "
 #"ns)"
) 0 0 4 29 1 #"\n"
0 0 17 3 65
#";  (namespace-set-variable-value! 'make-length make-length #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";  ;(namespace-set-variable-value! 'Int Int #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 63
#";  (namespace-set-variable-value! 'smt:assert smt:assert #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 4 29 1 #"\n"
0 0 17 3 54 #";  (namespace-set-variable-value! 'nil/s  nil/s #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";  (namespace-set-variable-value! '=/s  =/s #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";  (namespace-set-variable-value! 'list->z3-list  list->z3-list #f n"
 #"s)"
) 0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #";  (namespace-set-variable-value! 'smt:check-sat  smt:check-sat #f n"
 #"s)"
) 0 0 4 29 1 #"\n"
0 0 17 3 60
#";  (namespace-set-variable-value! 'smt:eval  smt:eval #f ns)"
0 0 4 29 1 #"\n"
0 0 17 3 75
(
 #";   (namespace-set-variable-value! 'smt:new-context  smt:new-context"
 #" #f ns)"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 75
(
 #";(namespace-set-variable-value! 'smt:with-context   smt:with-context"
 #" #f ns)"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 5 #"nil/s"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"42"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"24"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"21"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 4 3 1 #" "
0 0 20 3 2 #"18"
0 0 4 3 1 #" "
0 0 20 3 2 #"14"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"cx\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"check-eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 17 #";  (eval lst2 ns)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 21 #"smt:declare-datatypes"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"Addr"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Addr"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 24 #";; the equality relation"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"forall/s"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 4 #"=>/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 41 #";; a > 1, c>a => c>1 Or a = 1, c=a => c=1"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 17 #"abs-conc-relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Addr"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"forall/s"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 4 #"=>/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"abs-conc-relation"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                                     "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 17 #"abs-conc-relation"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 27 #";; test equality-inequality"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"a3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 4 #"Addr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 14 3 2 #"a3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 14 3 2 #"a3"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 24 #"; test abs-conc-relation"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"i1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"abs-conc-relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 4 3 1 #" "
0 0 14 3 2 #"i1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"equality-inequality"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"abs-conc-relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"a2"
0 0 4 3 1 #" "
0 0 14 3 2 #"i1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 16 #";(smt:check-sat)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";(define lst22 "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 57 #"; (parameterize ((current-namespace (current-namespace)))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 5 #"nil/s"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"42"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"24"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v4"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v4"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"+/s"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"21"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 4 3 1 #" "
0 0 20 3 2 #"18"
0 0 4 3 1 #" "
0 0 20 3 2 #"14"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 31 #";   (smt:declare-fun v4 () Int)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 33 #";(smt:assert (=/s v4 (+/s 10 1)))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"check-eq?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 33 #";(check-equal? (smt:eval v3) 10))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 2 #";)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";(eval lst22 ns)"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";(define lst12 (append lst1 lst22))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";(eval lst12 ns)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 5 #"nil/s"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 33 #";(check-eq? (smt:check-sat) 'sat)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 17 3 21 #"; #:macro-finder #t )"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"l11"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"l22"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"l33"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"l44"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 4 3 1 #" "
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v4"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v4"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"l2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"l3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"l3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"l4"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"l3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 2 #"v4"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 2 #"  "
0 0 14 3 2 #"l2"
0 0 4 3 1 #" "
0 0 14 3 2 #"l4"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"</s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"smt:eval"
0 0 4 3 1 #" "
0 0 14 3 2 #"l3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"index"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 33 #"; (check-equal?  (smt:eval l3) 3)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 17 #"; (smt:check-sat)"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; (define (gen-formulas lst-defs) "
0 0 4 29 1 #"\n"
0 0 17 3 20 #";  (smt:with-context"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";    (smt:new-context)"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";    (define len (make-length 10))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";    @lst-defs"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";    ))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 4 29 1 #"\n"
0 0 17 3 19 #"; (define lst-defs "
0 0 4 29 1 #"\n"
0 0 17 3 6 #";   `("
0 0 4 29 1 #"\n"
0 0 17 3 33 #";     (smt:declare-fun v1 () Int)"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";     (smt:assert (=/s v1 (len nil/s)))"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";     (check-eq? (smt:check-sat) 'sat)"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";    (check-equal? (smt:eval v1) 0)))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 9 #"test-case"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 19 3 13 #"\"Test length\""
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 5 #"nil/s"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"42"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"24"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 2 #"v3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"21"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 4 3 1 #" "
0 0 20 3 2 #"18"
0 0 4 3 1 #" "
0 0 20 3 2 #"14"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 4 3 1 #" "
0 0 20 3 1 #"9"
0 0 4 3 1 #" "
0 0 20 3 1 #"8"
0 0 4 3 1 #" "
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"v10"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 14 3 3 #"v10"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 20 3 2 #"42"
0 0 4 3 1 #" "
0 0 20 3 2 #"31"
0 0 4 3 1 #" "
0 0 20 3 2 #"24"
0 0 4 3 1 #" "
0 0 20 3 2 #"19"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 14 3 3 #"v10"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 35 #";  (check-eq? (smt:check-sat) 'sat)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 31 #";(check-equal? (smt:eval v1) 0)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 31 #";(check-equal? (smt:eval v2) 4)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 34 #";(check-equal? (smt:eval v3) 10)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 12 #"parameterize"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"current-namespace"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-namespace"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-append"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"LEN"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 14 #"smt:define-fun"
0 0 4 3 1 #" "
0 0 14 3 7 #"inBound"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"arr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"ite/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"LEN"
0 0 4 3 1 #" "
0 0 14 3 3 #"arr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var0"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"=>/s"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 56 #"                                                        "
0 0 22 3 1 #"("
0 0 14 3 8 #"forall/s"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"and/s"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"</s"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 56 #"                                                        "
0 0 22 3 1 #"("
0 0 14 3 7 #"inBound"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var1"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 12 #"parameterize"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"current-namespace"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-namespace"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"len"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-append"
0 0 4 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 3 #"LEN"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"smt:define-fun"
0 0 4 3 1 #" "
0 0 14 3 7 #"inBound"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"arr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"ite/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"LEN"
0 0 4 3 1 #" "
0 0 14 3 3 #"arr"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var0"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var1"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var2"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"=>/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"forall/s"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"and/s"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"</s"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"LEN"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"inBound"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var1"
0 0 4 3 1 #" "
0 0 14 3 8 #"smt-var3"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
