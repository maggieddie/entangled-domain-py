#lang racket
(require rackunit)
(require "../../main.rkt"
     "../../examples/list-helpers.rkt")

;(module m racket/base
;  
;  (require rackunit)
;  (require "../../main.rkt"
;           "../../examples/list-helpers.rkt")
;  ;(provide len)
;  (smt:with-context
;   (smt:new-context)
;   (define len (make-length 10))
;   (smt:check-sat)))
;
;;(require "m.rkt")
;(require 'm)
;
;(define ns (module->namespace ''m))

;(define lst-to-eval
;  `(
;    (+ 1 3)
;    (define len 10)))
;
;
;
;(define (test lst)
;  (define num 1)
;  (define l (list))
;  `@lst)
;
;(define lst
;  `( (define num2 (add1 num))
;     (displayln num2)))


;
;(smt:with-context
;     (smt:new-context)
;     (define len (make-length 10))
;     (smt:declare-fun v1 () Int)
;    (smt:assert (=/s v1 (len nil/s)))
;    (check-eq? (smt:check-sat) 'sat)
;    (check-equal? (smt:eval v1) 0))

;(define-namespace-anchor top0)

;(parameterize ((current-namespace (namespace-anchor->namespace top0)))
 ; (eval '(define x 10))
  ;(namespace-variable-value 'x))
;
;(define (gen-formulas lst-defs) 
;  
;   `((smt:with-context
;     (smt:new-context)
;     (define len (make-length 10))
;     ,@lst-defs
;     ) ))
;
;(define lst-defs 
;  `(
;    (smt:declare-fun v1 () Int)
;    (smt:assert (=/s v1 (len nil/s)))
;    (check-eq? (smt:check-sat) 'sat)
;    (check-equal? (smt:eval v1) 0)))
;
;;(gen-formulas lst-defs)
;
;;(define-namespace-anchor top)
;
;(parameterize ((current-namespace (current-namespace))); (namespace-anchor->namespace top)))
;  (eval 
;   `(smt:with-context
;     (smt:new-context)
;     (define len (make-length 10))
;     (smt:declare-fun v1 () Int)
;    (smt:assert (=/s v1 (len nil/s)))
;    (check-eq? (smt:check-sat) 'sat)
;    (check-equal? (smt:eval v1) 0)))
;   ;(gen-formulas lst-defs))
;  (namespace-variable-value `len))

;(define (fire-Z3 )
;  (smt:with-context
;     (smt:new-context)
;     (define len (make-length 10))
;     (gen-fors len)))
;
; (define-syntax-rule (gen-fors len)
;   (begin 
;     (smt:declare-fun v1 () Int)
;    (smt:assert (=/s v1 (len nil/s)))
;    (check-eq? (smt:check-sat) 'sat)
;    (check-equal? (smt:eval v1) 0)))
; 
; (fire-Z3 gen-fors)

  (define lst2 
  `(smt:with-context
    (smt:new-context)
    (define len (make-length 10))
    (smt:declare-fun v1 () Int)
    (smt:assert (=/s v1 (len nil/s)))
    (smt:declare-fun v2 () Int)
    (smt:assert (=/s v2 (len (list->z3-list '(42 31 24 19)))))
    (smt:declare-fun v3 () Int)
    (smt:assert (=/s v3 (len (list->z3-list '(21 19 18 14 10 9 8 7 6 5)))))
    (displayln "cx")
    (check-eq? (smt:check-sat) 'sat)
    (check-equal? (smt:eval v1) 0)
    (check-equal? (smt:eval v2) 4)
    (check-equal? (smt:eval v3) 10)))

  (define-namespace-anchor top)
 (parameterize ((current-namespace (namespace-anchor->namespace top)))
   (eval 
   `(smt:with-context
    (smt:new-context )
    (parameterize ((current-namespace (current-namespace)))
      (define len (make-length 10))
      (smt:declare-fun v1 () Int)
      (smt:assert (=/s v1 (len nil/s)))
      (smt:declare-fun v2 () Int)
     
      (smt:assert (=/s v2 (len (list->z3-list '(42 31 24 19)))))
      (smt:declare-fun v3 () Int)
      (smt:assert (=/s v3 (len (list->z3-list '(21 19 18 14 10 9 8 7 6 5)))))
      (check-eq? (smt:check-sat) 'sat)
      (check-equal? (smt:eval v1) 0)
      (check-equal? (smt:eval v2) 4)
      (check-equal? (smt:eval v3) 10)))))
 
; (eval lstttt (make-base-namespace))
 

  (define-namespace-anchor top2)
 (parameterize ((current-namespace (namespace-anchor->namespace top2))); (make-base-namespace)));
   (eval 
   `(smt:with-context
    (smt:new-context )
    (parameterize ((current-namespace (current-namespace)))
      (define len (make-length 10))
      (smt:assert (</s 3 (len (list->z3-list '(42 31 24 19)))))
      (check-eq? (smt:check-sat) 'sat)))))
      ;(check-equal? (smt:eval v1) 0)
      ;(check-equal? (smt:eval v2) 4)
     ; (check-equal? (smt:eval v3) 10)))))
 
 (define (fire-Z3 lst)
   (define base-lst
     `(smt:with-context
    (smt:new-context )
    (parameterize ((current-namespace (current-namespace)))
      (define len (make-length 10))
      ,@lst)))
   
   (parameterize ((current-namespace (namespace-anchor->namespace top)))
   (eval  base-lst)))
 
 (define lst 
   `(
      (smt:declare-fun v4 () Int)
      (smt:assert (=/s v4 (+/s 3 4)) )
     ; (smt:assert (=/s v4 6))
     (smt:assert (</s 3 (len (list->z3-list '(42 31 24 19)))))
      (check-eq? (smt:check-sat) 'sat)))
 
; (fire-Z3 lst)
; (displayln "s")
     
(define test-loop  
 `(
   (smt:declare-fun smt-var0 () IntList)
   (smt:assert (=/s smt-var0 (list->z3-list (list 1 2 3 4))))
   (smt:declare-fun smt-var1 () Int)
   (smt:assert (=/s smt-var1 0))
   (smt:declare-fun smt-var2 () Int)
   (smt:assert (=/s smt-var2 0))
   (smt:declare-fun smt-var3 () Int)
   (smt:assert (=/s smt-var3 (+/s 1 0)) )
   ;(stm:declare-fun smt-var3 () Int)
   ;(smt:assert (=/s smt-var3 (+/s 1 0)))
   
;   (smt:declare-fun smt-var4 () Int)
;   (smt:assert (=/s smt-var4 1))
;   (smt:declare-fun smt-var5 () Int)
;   (smt:assert (=/s smt-var5 1))
;   (stm:declare-fun smt-var6 () Int)
;   (smt:assert (=/s smt-var6 (+ 1 1)))
;   (smt:declare-fun smt-var7 () Int)
;   (smt:assert (=/s smt-var7 2))
;   (smt:declare-fun smt-var8 () Int)
;   (smt:assert (=/s smt-var8 2))
;   (stm:declare-fun smt-var9 () Int)
;   (smt:assert (=/s smt-var9 (+ 1 2)))
;   (smt:declare-fun smt-var10 () Int)
;   (smt:assert (=/s smt-var10 3))
;   (smt:declare-fun smt-var11 () Int)
;   (smt:assert (=/s smt-var11 3))
  ; (stm:declare-fun smt-var12 () Int)
 ;  (smt:assert (=/s smt-var12 (+/s 1 3)))
;   (smt:declare-fun smt-var13 () Int)
;   (smt:assert (=/s smt-var13 4))
;   (smt:declare-fun smt-var14 () Int)
;   (smt:assert (=/s smt-var14 4))
;   (smt:declare-fun smt-var15 () Int)
;   (smt:assert (=/s smt-var15 4))
;   (smt:declare-fun smt-var16 () Int)
;   (smt:assert (=/s smt-var16 4))
   (smt:declare-fun smt-var17 () Int)
   (smt:assert (=/s smt-var17 0))
   (smt:assert (<=/s smt-var17 (len smt-var0)))
   (smt:check-sat)))

(define (fire2-Z3 lst)
   (define base-lst
     `(smt:with-context
    (smt:new-context )
    (parameterize ((current-namespace (current-namespace)))
      (define len (make-length 10))
      ,@lst)))
 ; (pretty-write base-lst)
   (parameterize ((current-namespace (namespace-anchor->namespace top)))
     (eval  base-lst)))

(define test-vertex
  `(
    (smt:declare-fun smt-var0 () IntList)
  (smt:declare-fun smt-var1 () IntList)
  (smt:assert (=/s smt-var1 (list->z3-list (list 10 20 30 40))))
  (smt:declare-fun smt-var2 () IntList)
  (smt:assert (=/s smt-var2 (list->z3-list (list 0 5 1 4))))
  (smt:declare-fun smt-var3 () Int)
    (smt:assert (=/s smt-var3 0))
      (smt:declare-fun smt-var4 () Int)
  (smt:assert (=/s smt-var4 0))
  (smt:declare-fun smt-var5 () Int)
  (smt:assert (=/s smt-var5 (+/s 1 0)))
  (smt:declare-fun smt-var6 () Int)
  (smt:assert (=/s smt-var6 1))
  (smt:declare-fun smt-var7 () Int)
  (smt:assert (=/s smt-var7 1))
  (smt:declare-fun smt-var8 () Int)
  (smt:assert (=/s smt-var8 (+/s 1 1)))
  (smt:declare-fun smt-var9 () Int)
  (smt:assert (=/s smt-var9 2))
  (smt:declare-fun smt-var10 () Int)
  (smt:assert (=/s smt-var10 2))
  (smt:declare-fun smt-var11 () Int)
  (smt:assert (=/s smt-var11 (+/s 1 2)))
  (smt:declare-fun smt-var12 () Int)
  (smt:assert (=/s smt-var12 3))
  (smt:declare-fun smt-var13 () Int)
  (smt:assert (=/s smt-var13 3))
  (smt:declare-fun smt-var14 () Int)
  (smt:assert (=/s smt-var14 (+/s 1 3)))
  (smt:declare-fun smt-var15 () Int)
  (smt:assert (=/s smt-var15 4))
  (smt:declare-fun smt-var16 () Int)
  (smt:assert (=/s smt-var16 4))
  (smt:declare-fun smt-var17 () Int)
  (smt:assert (=/s smt-var17 4))
  (smt:declare-fun smt-var18 () Int)
  (smt:assert (=/s smt-var18 0))
  ;(smt:assert (>=/s smt-var18 (len smt-var2)))
 (smt:check-sat)
;  (smt:declare-fun smt-var19 () Int)
;  (smt:assert (=/s smt-var19 0))
;  (smt:declare-fun smt-var20 () Int)
;  (smt:assert (=/s smt-var20 0))
;  (smt:declare-fun smt-var21 () Int)
;  (smt:assert (=/s smt-var21 0))
;  (smt:assert (>=/s smt-var21 (len smt-var1)))
;  ;(smt:check-sat)
;  (smt:declare-fun smt-var22 () Int)
;  (smt:assert (=/s smt-var22 10))
;  (smt:declare-fun smt-var23 () Int)
;  (smt:assert (=/s smt-var23 10))
;  (smt:declare-fun smt-var24 () Int)
;  (smt:assert (=/s smt-var24 10))
;  (smt:declare-fun smt-var25 () Int)
;  (smt:assert (=/s smt-var25 (+/s 0 1)))
;  (smt:declare-fun smt-var26 () Int)
;  (smt:assert (=/s smt-var26 1))
;  (smt:declare-fun smt-var27 () Int)
;  (smt:assert (=/s smt-var27 1))
;  (smt:declare-fun smt-var28 () Int)
;  (smt:assert (=/s smt-var28 1))
;  (smt:declare-fun smt-var29 () Int)
;  (smt:assert (=/s smt-var29 0))
;  (smt:declare-fun smt-var30 () Int)
;  (smt:assert (=/s smt-var30 (+/s 1 0)))
;  (smt:declare-fun smt-var31 () Int)
;  (smt:assert (=/s smt-var31 1))
;  (smt:declare-fun smt-var32 () Int)
;  (smt:assert (=/s smt-var32 1))
;  (smt:declare-fun smt-var33 () Int)
;  (smt:assert (=/s smt-var33 (+/s 1 1)))
;  (smt:declare-fun smt-var34 () Int)
;  (smt:assert (=/s smt-var34 2))
;  (smt:declare-fun smt-var35 () Int)
;  (smt:assert (=/s smt-var35 2))
;  (smt:declare-fun smt-var36 () Int)
;  (smt:assert (=/s smt-var36 (+/s 1 2)))
;  (smt:declare-fun smt-var37 () Int)
;  (smt:assert (=/s smt-var37 3))
;  (smt:declare-fun smt-var38 () Int)
;  (smt:assert (=/s smt-var38 3))
;  (smt:declare-fun smt-var39 () Int)
;  (smt:assert (=/s smt-var39 (+/s 1 3)))
;  (smt:declare-fun smt-var40 () Int)
;  (smt:assert (=/s smt-var40 4))
;  (smt:declare-fun smt-var41 () Int)
;  (smt:assert (=/s smt-var41 4))
;  (smt:declare-fun smt-var42 () Int)
;  (smt:assert (=/s smt-var42 4))
;  (smt:declare-fun smt-var43 () Int)
;  (smt:assert (=/s smt-var43 1))
;  (smt:assert (>=/s smt-var43 (len smt-var2)))
;  ;(smt:check-sat)
;  (smt:declare-fun smt-var44 () Int)
;  (smt:assert (=/s smt-var44 5))
;  (smt:declare-fun smt-var45 () Int)
;  (smt:assert (=/s smt-var45 5))
;  (smt:declare-fun smt-var46 () Int)
;  (smt:assert (=/s smt-var46 5))
;  (smt:assert (>=/s smt-var46 (len smt-var1)))
;  ;(smt:check-sat)
;  (smt:declare-fun smt-var47 () Int)
;  (smt:assert (=/s smt-var47 (+/s 1 1)))
;  (smt:declare-fun smt-var48 () Int)
;  (smt:assert (=/s smt-var48 2))
;  (smt:declare-fun smt-var49 () Int)
;  (smt:assert (=/s smt-var49 2))
;  (smt:declare-fun smt-var50 () Int)
;  (smt:assert (=/s smt-var50 2))
;  (smt:declare-fun smt-var51 () Int)
;  (smt:assert (=/s smt-var51 0))
;  (smt:declare-fun smt-var52 () Int)
;  (smt:assert (=/s smt-var52 (+/s 1 0)))
;  (smt:declare-fun smt-var53 () Int)
;  (smt:assert (=/s smt-var53 1))
;  (smt:declare-fun smt-var54 () Int)
;  (smt:assert (=/s smt-var54 1))
;  (smt:declare-fun smt-var55 () Int)
;  (smt:assert (=/s smt-var55 (+/s 1 1)))
;  (smt:declare-fun smt-var56 () Int)
;  (smt:assert (=/s smt-var56 2))
;  (smt:declare-fun smt-var57 () Int)
;  (smt:assert (=/s smt-var57 2))
;  (smt:declare-fun smt-var58 () Int)
;  (smt:assert (=/s smt-var58 (+/s 1 2)))
;  (smt:declare-fun smt-var59 () Int)
;  (smt:assert (=/s smt-var59 3))
;  (smt:declare-fun smt-var60 () Int)
;  (smt:assert (=/s smt-var60 3))
;  (smt:declare-fun smt-var61 () Int)
;  (smt:assert (=/s smt-var61 (+/s 1 3)))
;  (smt:declare-fun smt-var62 () Int)
;  (smt:assert (=/s smt-var62 4))
;  (smt:declare-fun smt-var63 () Int)
;  (smt:assert (=/s smt-var63 4))
;  (smt:declare-fun smt-var64 () Int)
;  (smt:assert (=/s smt-var64 4))
;  (smt:declare-fun smt-var65 () Int)
;  (smt:assert (=/s smt-var65 2))
;  (smt:assert (>=/s smt-var65 (len smt-var2)))
;  ;(smt:check-sat)
;  (smt:declare-fun smt-var66 () Int)
;  (smt:assert (=/s smt-var66 1))
;  (smt:declare-fun smt-var67 () Int)
;  (smt:assert (=/s smt-var67 1))
;  (smt:declare-fun smt-var68 () Int)
;  (smt:assert (=/s smt-var68 1))
;  (smt:assert (>=/s smt-var68 (len smt-var1)))
; ; (smt:check-sat)
;  (smt:declare-fun smt-var69 () Int)
;  (smt:assert (=/s smt-var69 20))
;  (smt:declare-fun smt-var70 () Int)
;  (smt:assert (=/s smt-var70 20))
;  (smt:declare-fun smt-var71 () Int)
;  (smt:assert (=/s smt-var71 20))
;  (smt:declare-fun smt-var72 () Int)
;  (smt:assert (=/s smt-var72 (+/s 2 1)))
;  (smt:declare-fun smt-var73 () Int)
;  (smt:assert (=/s smt-var73 3))
;  (smt:declare-fun smt-var74 () Int)
;  (smt:assert (=/s smt-var74 3))
;  (smt:declare-fun smt-var75 () Int)
;  (smt:assert (=/s smt-var75 3))
;  (smt:declare-fun smt-var76 () Int)
;  (smt:assert (=/s smt-var76 0))
;  (smt:declare-fun smt-var77 () Int)
;  (smt:assert (=/s smt-var77 (+/s 1 0)))
;  (smt:declare-fun smt-var78 () Int)
;  (smt:assert (=/s smt-var78 1))
;  (smt:declare-fun smt-var79 () Int)
;  (smt:assert (=/s smt-var79 1))
;  (smt:declare-fun smt-var80 () Int)
;  (smt:assert (=/s smt-var80 (+/s 1 1)))
;  (smt:declare-fun smt-var81 () Int)
;  (smt:assert (=/s smt-var81 2))
;  (smt:declare-fun smt-var82 () Int)
;  (smt:assert (=/s smt-var82 2))
;  (smt:declare-fun smt-var83 () Int)
;  (smt:assert (=/s smt-var83 (+/s 1 2)))
;  (smt:declare-fun smt-var84 () Int)
;  (smt:assert (=/s smt-var84 3))
;  (smt:declare-fun smt-var85 () Int)
;  (smt:assert (=/s smt-var85 3))
;  (smt:declare-fun smt-var86 () Int)
;  (smt:assert (=/s smt-var86 (+/s 1 3)))
;  (smt:declare-fun smt-var87 () Int)
;  (smt:assert (=/s smt-var87 4))
;  (smt:declare-fun smt-var88 () Int)
;  (smt:assert (=/s smt-var88 4))
;  (smt:declare-fun smt-var89 () Int)
;  (smt:assert (=/s smt-var89 4))
;  (smt:declare-fun smt-var90 () Int)
;  (smt:assert (=/s smt-var90 3))
;  (smt:assert (>=/s smt-var90 (len smt-var2)))
;  ;(smt:check-sat)
;  (smt:declare-fun smt-var91 () Int)
;  (smt:assert (=/s smt-var91 4))
;  (smt:declare-fun smt-var92 () Int)
;  (smt:assert (=/s smt-var92 4))
;  (smt:declare-fun smt-var93 () Int)
;  (smt:assert (=/s smt-var93 4))
  (smt:assert  (=/s (len smt-var1) 4))
  ;(smt:assert (>=/s smt-var93 (len smt-var1)))
  (smt:check-sat)
 ; (smt:declare-fun v () Int)
  ;(smt:assert (=/s v (len smt-var1)))
  ;(check-equal?  (smt:eval v) 5)
  
;  (smt:declare-fun smt-var94 () Int)
;  (smt:assert (=/s smt-var94 (+/s 3 1)))
;  (smt:declare-fun smt-var95 () Int)
;  (smt:assert (=/s smt-var95 4))
;  (smt:declare-fun smt-var96 () Int)
;  (smt:assert (=/s smt-var96 4))
;  (smt:declare-fun smt-var97 () Int)
;  (smt:assert (=/s smt-var97 4))
;  (smt:declare-fun smt-var98 () Int)
;  (smt:assert (=/s smt-var98 0))
;  (smt:declare-fun smt-var99 () Int)
;  (smt:assert (=/s smt-var99 (+/s 1 0)))
;  (smt:declare-fun smt-var100 () Int)
;  (smt:assert (=/s smt-var100 1))
;  (smt:declare-fun smt-var101 () Int)
;  (smt:assert (=/s smt-var101 1))
;  (smt:declare-fun smt-var102 () Int)
;  (smt:assert (=/s smt-var102 (+/s 1 1)))
;  (smt:declare-fun smt-var103 () Int)
;  (smt:assert (=/s smt-var103 2))
;  (smt:declare-fun smt-var104 () Int)
;  (smt:assert (=/s smt-var104 2))
;  (smt:declare-fun smt-var105 () Int)
;  (smt:assert (=/s smt-var105 (+/s 1 2)))
;  (smt:declare-fun smt-var106 () Int)
;  (smt:assert (=/s smt-var106 3))
;  (smt:declare-fun smt-var107 () Int)
;  (smt:assert (=/s smt-var107 3))
;  (smt:declare-fun smt-var108 () Int)
;  (smt:assert (=/s smt-var108 (+/s 1 3)))
;  (smt:declare-fun smt-var109 () Int)
;  (smt:assert (=/s smt-var109 4))
;  (smt:declare-fun smt-var110 () Int)
;  (smt:assert (=/s smt-var110 4))
;  (smt:declare-fun smt-var111 () Int)
;  (smt:assert (=/s smt-var111 4)))
  ))

(fire2-Z3 test-vertex)

;(test-case
;   "Test append"
;   (smt:with-context
;    (smt:new-context)
;    (define append (make-append 10))
;    (define len (make-length 10))
;    (smt:declare-fun v2 () IntList)
;    (smt:assert (=/s v2 (append (list->z3-list '(1 2 3)) (list->z3-list '(4 5 6)))))
;    (smt:declare-fun v3 () IntList)
;    (smt:assert (=/s v3 (append (list->z3-list '(10 20 30 40 50 60 )) v2 )));(list->z3-list '(9 10 11 12)))))
;   
;    (check-eq? (smt:check-sat) 'sat)
;  ;  (check-equal? (z3-list->list (smt:eval v1)) '())
;   ; (check-equal? (z3-list->list (smt:eval v2)) '(1 2 3 4 5 6))
;    (check-equal? (z3-list->list (smt:eval v3)) '( 10 20 30 40 50 60 1 2 3 4 5 6))))
     
   



