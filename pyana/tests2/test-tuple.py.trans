(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define len (void))
 (define b (void))
 (define t (void))
 (define y (void))
 (define u (void))
 (define a (void))
 (define z (void))
 (define x (void))
 (set-global!
  len
  (lambda (seq22)
    (call/ec
     (lambda (return)
       (let ((cnt23 0))
         (cond
          ((or (py-list? seq22) (set? seq22) (tuple? seq22))
           (let ((container24 (dict-ref seq22 "__containerdict__")))
             (for-each entry25 container24 (set! cnt23 (+ 1 cnt23)))
             (return cnt23)))
          (else
           (for-each entry25 seq22 (set! cnt23 (+ cnt23 1)))
           (return cnt23))))))))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict27)
    (call/ec
     (lambda (return)
       (let (($localo28
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo28 "__init__") tmp-dict27)
         (return $localo28))))))
 (set-global!
  set
  (lambda (tmp-dict30)
    (call/ec
     (lambda (return)
       (let (($localo31
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo31 "__init__") tmp-dict30)
         (return $localo31))))))
 (set-global!
  tuple
  (lambda (tmp-dict33)
    (call/ec
     (lambda (return)
       (let (($localo34
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo34 "__init__") tmp-dict33)
         (return $localo34))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self35 tmpdict36)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict36)
           (set-field!
            self35
            "__containerdict__"
            (dict-ref tmpdict36 "__containerdict__"))
           (set-field! self35 "__containerdict__" tmpdict36))))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self37 tmpdict38)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict38)
           (set-field!
            self37
            "__containerdict__"
            (dict-ref tmpdict38 "__containerdict__"))
           (set-field! self37 "__containerdict__" tmpdict38))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self39 tmp-dict40)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict40) (tuple? tmp-dict40) (set? tmp-dict40))
           (set-field!
            self39
            "__containerdict__"
            (dict-ref tmp-dict40 "__containerdict__"))
           (set-field! self39 "__containerdict__" tmp-dict40))))))))
 (set-global! t ((get-global tuple) (dict (0 12345) (1 54321) (2 "hello!"))))
 (py-print
  (let ((e11 (get-global t)))
    (let ((i12 0))
      (cond
       ((py-list? e11) (py-list-ref e11 i12))
       ((tuple? e11) (tuple-ref e11 i12))
       ((dict? e11) (dict-ref e11 i12))
       (else (error "cannot index object"))))))
 (py-print (get-global t))
 (set-global!
  u
  ((get-global tuple)
   (dict
    (0 (get-global t))
    (1 ((get-global tuple) (dict (0 1) (1 2) (2 3) (3 4) (4 5)))))))
 (set-global!
  x
  (let ((e13 (get-global u)))
    (let ((i14 0))
      (cond
       ((py-list? e13) (py-list-ref e13 i14))
       ((tuple? e13) (tuple-ref e13 i14))
       ((dict? e13) (dict-ref e13 i14))
       (else (error "cannot index object"))))))
 (set-global!
  y
  (let ((e15 (get-global u)))
    (let ((i16 1))
      (cond
       ((py-list? e15) (py-list-ref e15 i16))
       ((tuple? e15) (tuple-ref e15 i16))
       ((dict? e15) (dict-ref e15 i16))
       (else (error "cannot index object"))))))
 (py-print (get-global x))
 (py-print (get-global y))
 (py-print (get-global u))
 (let ((t17
        ((get-global tuple)
         (dict (0 ((get-global List) (dict (0 100) (1 200)))) (1 "hi")))))
   (set-global!
    a
    (let ((e18 t17))
      (let ((i19 0))
        (cond
         ((py-list? e18) (py-list-ref e18 i19))
         ((tuple? e18) (tuple-ref e18 i19))
         ((dict? e18) (dict-ref e18 i19))
         (else (error "cannot index object"))))))
   (set-global!
    b
    (let ((e20 t17))
      (let ((i21 1))
        (cond
         ((py-list? e20) (py-list-ref e20 i21))
         ((tuple? e20) (tuple-ref e20 i21))
         ((dict? e20) (dict-ref e20 i21))
         (else (error "cannot index object")))))))
 (set-global! z (get-global a))
 (py-print (get-global z)))
