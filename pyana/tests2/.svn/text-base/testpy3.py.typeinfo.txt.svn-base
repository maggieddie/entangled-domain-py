Number of States = 148

set: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict20) (call/ec (lambda (return) (let (($localo21 (dict (__class__ set) (__type__ instSet)))) (let ((b34 (get-field $localo21 __init__))) (let ((_35 (b34 tmp-dict20))) (let ((b36 (return $localo21))) b36))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$A . #(struct:BAddr g$A ())) (g$a . #(struct:BAddr g$a ())) (g$va . #(struct:BAddr g$va ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
continue: 
object: 
	#<Cls>
	#(struct:closure (lambda () (void)) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (object . #(struct:BAddr object ())) (List . #(struct:BAddr List ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$A . #(struct:BAddr g$A ())) (g$a . #(struct:BAddr g$a ())) (g$va . #(struct:BAddr g$va ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
List: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict17) (call/ec (lambda (return) (let (($localo18 (dict (__class__ List) (__type__ instPyList)))) (let ((b28 (get-field $localo18 __init__))) (let ((_29 (b28 tmp-dict17))) (let ((b30 (return $localo18))) b30))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (List . #(struct:BAddr List ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$A . #(struct:BAddr g$A ())) (g$a . #(struct:BAddr g$a ())) (g$va . #(struct:BAddr g$va ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
tuple: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict23) (call/ec (lambda (return) (let (($localo24 (dict (__class__ tuple) (__type__ instTuple)))) (let ((b40 (get-field $localo24 __init__))) (let ((_41 (b40 tmp-dict23))) (let ((b42 (return $localo24))) b42))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (b37 . #(struct:BAddr b37 ())) (_38 . #(struct:BAddr _38 ())) (_39 . #(struct:BAddr _39 ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$A . #(struct:BAddr g$A ())) (g$a . #(struct:BAddr g$a ())) (g$va . #(struct:BAddr g$va ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
gbl-dict: 
	 object: 
		#hash()
x: 
	x in A
$localo11: 
	 object: 
		#hash(("x" . #<set: "x in A">) ("__type__" . #<set: "instA">) ("__class__" . #<set: g$A>))
g$A: 
	#<Cls>
	#(struct:closure (lambda (x) (call/ec (lambda (return) (let (($localo11 (dict (__class__ g$A) (__type__ instA)))) (let ((b79 (get-field $localo11 __init__))) (let ((_80 (b79 x))) (let ((b81 (return $localo11))) b81))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (b37 . #(struct:BAddr b37 ())) (_38 . #(struct:BAddr _38 ())) (_39 . #(struct:BAddr _39 ())) (b43 . #(struct:BAddr b43 ())) (tuple . #(struct:BAddr tuple ())) (_44 . #(struct:BAddr _44 ())) (_45 . #(struct:BAddr _45 ())) (b46 . #(struct:BAddr b46 ())) (_47 . #(struct:BAddr _47 ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (_48 . #(struct:BAddr _48 ())) (b49 . #(struct:BAddr b49 ())) (b50 . #(struct:BAddr b50 ())) (b51 . #(struct:BAddr b51 ())) (_52 . #(struct:BAddr _52 ())) (_53 . #(struct:BAddr _53 ())) (b54 . #(struct:BAddr b54 ())) (b55 . #(struct:BAddr b55 ())) (b58 . #(struct:BAddr b58 ())) (b59 . #(struct:BAddr b59 ())) (_60 . #(struct:BAddr _60 ())) (_61 . #(struct:BAddr _61 ())) (b62 . #(struct:BAddr b62 ())) (b63 . #(struct:BAddr b63 ())) (b66 . #(struct:BAddr b66 ())) (b67 . #(struct:BAddr b67 ())) (_68 . #(struct:BAddr _68 ())) (_69 . #(struct:BAddr _69 ())) (b70 . #(struct:BAddr b70 ())) (b71 . #(struct:BAddr b71 ())) (b75 . #(struct:BAddr b75 ())) (b76 . #(struct:BAddr b76 ())) (_77 . #(struct:BAddr _77 ())) (_78 . #(struct:BAddr _78 ())) (g$A . #(struct:BAddr g$A ())) (g$a . #(struct:BAddr g$a ())) (g$va . #(struct:BAddr g$va ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
self: 
	 object: 
		#hash(("x" . #<set: "x in A">) ("__type__" . #<set: "instA">) ("__class__" . #<set: g$A>))
g$a: 
	 object: 
		#hash(("x" . #<set: "x in A">) ("__type__" . #<set: "instA">) ("__class__" . #<set: g$A>))
g$va: 
	x in A
$current-handler: 
return: 
	#<kontP>
	#<kontP>
	#<kontP>
