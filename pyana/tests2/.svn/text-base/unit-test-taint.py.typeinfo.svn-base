Number of States = 1512

i: 
	0
	1
set: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict22) (call/ec (lambda (return) (let (($localo23 (dict (__class__ set) (__type__ instSet)))) (let ((b34 (get-field $localo23 __init__))) (let ((_35 (b34 tmp-dict22))) (let ((b36 (return $localo23))) b36))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
p: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
seq14: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
cnt15: 
	7
	8
	9
	3
	4
	5
	6
	0
	1
	2
t11: 
	#t
container16: 
	 object: 
		#hash((0 . #<set: "a">) (1 . #<set: "<">) (2 . #<set: "s">) (3 . #<set: "r">) (4 . #<set: "i">) (5 . #<set: "p">) (6 . #<set: "t">) (7 . #<set: "/">) (8 . #<set: ">">))
	 object: 
		#hash((0 . #<set: "<">) (1 . #<set: "s">) (2 . #<set: "r">) (3 . #<set: "i">) (4 . #<set: "p">) (5 . #<set: "t">) (6 . #<set: "/">) (7 . #<set: ">">))
$seq13: 
	 object: 
		#hash((0 . #<set: "a">) (1 . #<set: "<">) (2 . #<set: "s">) (3 . #<set: "r">) (4 . #<set: "i">) (5 . #<set: "p">) (6 . #<set: "t">) (7 . #<set: "/">) (8 . #<set: ">">))
	 object: 
		#hash((0 . #<set: "<">) (1 . #<set: "s">) (2 . #<set: "r">) (3 . #<set: "i">) (4 . #<set: "p">) (5 . #<set: "t">) (6 . #<set: "/">) (7 . #<set: ">">))
$loop14: 
	#(struct:closure (lambda (entry17) (call/ec (lambda (continue) (let ((b7 ((anf +) 1 cnt15))) (let ((_8 (set! cnt15 b7))) (void)))))) #hasheq((set . #(struct:BAddr set ())) (seq14 . #(struct:BAddr seq14 ())) (cnt15 . #(struct:BAddr cnt15 ())) (t11 . #(struct:BAddr t11 ())) (b1 . #(struct:BAddr b1 ())) (container16 . #(struct:BAddr container16 ())) (break . #(struct:BAddr break ())) (b6 . #(struct:BAddr b6 ())) (continue . #(struct:BAddr continue ())) (len . #(struct:BAddr len ())) (object . #(struct:BAddr object ())) (List . #(struct:BAddr List ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
entry17: 
	r
	a
	s
	t
	p
	i
	>
	<
	/
continue: 
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
object: 
	#<Cls>
	#(struct:closure (lambda () (void)) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (object . #(struct:BAddr object ())) (List . #(struct:BAddr List ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
tmp-dict19: 
	 object: 
		#hash((0 . #<set: "a">) (1 . #<set: "<">) (2 . #<set: "s">) (3 . #<set: "r">) (4 . #<set: "i">) (5 . #<set: "p">) (6 . #<set: "t">) (7 . #<set: "/">) (8 . #<set: ">">))
	 object: 
		#hash((0 . #<set: "<">) (1 . #<set: "s">) (2 . #<set: "r">) (3 . #<set: "i">) (4 . #<set: "p">) (5 . #<set: "t">) (6 . #<set: "/">) (7 . #<set: ">">))
$localo20: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
List: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict19) (call/ec (lambda (return) (let (($localo20 (dict (__class__ List) (__type__ instPyList)))) (let ((b28 (get-field $localo20 __init__))) (let ((_29 (b28 tmp-dict19))) (let ((b30 (return $localo20))) b30))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (List . #(struct:BAddr List ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
tuple: 
	#<Cls>
	#(struct:closure (lambda (tmp-dict25) (call/ec (lambda (return) (let (($localo26 (dict (__class__ tuple) (__type__ instTuple)))) (let ((b40 (get-field $localo26 __init__))) (let ((_41 (b40 tmp-dict25))) (let ((b42 (return $localo26))) b42))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (b37 . #(struct:BAddr b37 ())) (_38 . #(struct:BAddr _38 ())) (_39 . #(struct:BAddr _39 ())) (tuple . #(struct:BAddr tuple ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
gbl-dict: 
	 object: 
		#hash()
self27: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
tmpdict28: 
	 object: 
		#hash((0 . #<set: "a">) (1 . #<set: "<">) (2 . #<set: "s">) (3 . #<set: "r">) (4 . #<set: "i">) (5 . #<set: "p">) (6 . #<set: "t">) (7 . #<set: "/">) (8 . #<set: ">">))
	 object: 
		#hash((0 . #<set: "<">) (1 . #<set: "s">) (2 . #<set: "r">) (3 . #<set: "i">) (4 . #<set: "p">) (5 . #<set: "t">) (6 . #<set: "/">) (7 . #<set: ">">))
g$SCRIPT_PAT: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
s: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
j: 
	7
	8
	9
	3
	4
	5
	6
	0
	1
	2
c: 
	r
	s
	t
	p
	i
	>
	<
	/
$seq19: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
$loop20: 
	#(struct:closure (lambda (i13) (call/ec (lambda (continue) (let ((_95 (set! c i13))) (let ((_96 (void))) (let ((e11 s)) (let ((i12 j)) (let ((b103 ((anf py-list?) e11))) (let ((b102 (if b103 ((anf py-list-ref) e11 i12) (let ((b104 ((anf tuple?) e11))) (if b104 ((anf tuple-ref) e11 i12) (let ((b105 ((anf dict?) e11))) (if b105 ((anf dict-ref) e11 i12) (error cannot index object)))))))) (let ((b101 b102)) (let ((b100 b101)) (let ((b99 b100)) (let ((b106 ((anf not-equal?) c b99))) (let ((b98 (if b106 (let ((b107 (break))) b107) (let ((b108 ((anf +) j 1))) (let ((_109 (set! j b108))) (let ((_110 (void))) (let ((b112 ((anf -) j i))) (let ((b113 (len p))) (let ((b114 ((anf equal?) b112 b113))) (let ((b111 (if b114 (let ((b115 (return #t))) b115) (void)))) b111)))))))))) (let ((b97 b98)) b97))))))))))))))) #hasheq((i . #(struct:BAddr i ())) (set . #(struct:BAddr set ())) (p . #(struct:BAddr p ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (b37 . #(struct:BAddr b37 ())) (_38 . #(struct:BAddr _38 ())) (_39 . #(struct:BAddr _39 ())) (b43 . #(struct:BAddr b43 ())) (tuple . #(struct:BAddr tuple ())) (_44 . #(struct:BAddr _44 ())) (_45 . #(struct:BAddr _45 ())) (b46 . #(struct:BAddr b46 ())) (_47 . #(struct:BAddr _47 ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (_48 . #(struct:BAddr _48 ())) (b49 . #(struct:BAddr b49 ())) (b50 . #(struct:BAddr b50 ())) (b51 . #(struct:BAddr b51 ())) (_52 . #(struct:BAddr _52 ())) (_53 . #(struct:BAddr _53 ())) (b54 . #(struct:BAddr b54 ())) (b55 . #(struct:BAddr b55 ())) (b58 . #(struct:BAddr b58 ())) (b59 . #(struct:BAddr b59 ())) (_60 . #(struct:BAddr _60 ())) (_61 . #(struct:BAddr _61 ())) (b62 . #(struct:BAddr b62 ())) (b63 . #(struct:BAddr b63 ())) (b66 . #(struct:BAddr b66 ())) (b67 . #(struct:BAddr b67 ())) (_68 . #(struct:BAddr _68 ())) (_69 . #(struct:BAddr _69 ())) (b70 . #(struct:BAddr b70 ())) (b71 . #(struct:BAddr b71 ())) (b75 . #(struct:BAddr b75 ())) (b76 . #(struct:BAddr b76 ())) (_77 . #(struct:BAddr _77 ())) (_78 . #(struct:BAddr _78 ())) (b79 . #(struct:BAddr b79 ())) (b80 . #(struct:BAddr b80 ())) (_81 . #(struct:BAddr _81 ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (_82 . #(struct:BAddr _82 ())) (s . #(struct:BAddr s ())) (j . #(struct:BAddr j ())) (c . #(struct:BAddr c ())) (_83 . #(struct:BAddr _83 ())) (_84 . #(struct:BAddr _84 ())) (loop . #(struct:BAddr loop ())) (b85 . #(struct:BAddr b85 ())) (b86 . #(struct:BAddr b86 ())) (b87 . #(struct:BAddr b87 ())) (b88 . #(struct:BAddr b88 ())) (_89 . #(struct:BAddr _89 ())) (_90 . #(struct:BAddr _90 ())) (b94 . #(struct:BAddr b94 ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
i13: 
	r
	s
	t
	p
	i
	>
	<
	/
e11: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
i12: 
	7
	8
	3
	4
	5
	6
	0
	1
	2
g$issubstring: 
	#(struct:closure (lambda (s p) (call/ec (lambda (return) (let ((j (void))) (let ((c (void))) (let ((i (void))) (let ((_83 (set! i 0))) (let ((_84 (void))) (let ((_128 (call/ec (lambda (break) (let ((loop (void))) (let ((b123 (lambda () (let ((b85 (len s))) (let ((b86 (len p))) (let ((b87 ((anf -) b85 b86))) (let ((b88 ((anf <=) i b87))) (if b88 (let ((_121 (call/ec (lambda (continue) (let ((_89 (set! j i))) (let ((_90 (void))) (let ((_117 (call/ec (lambda (break) (let ((b94 (lambda ($seq19 $loop20) (let ((_92 ((anf for-container) $seq19 $loop20))) (let ((b93 (void))) (let ((b91 b93)) b91)))))) (let ((b116 (lambda (i13) (call/ec (lambda (continue) (let ((_95 (set! c i13))) (let ((_96 (void))) (let ((e11 s)) (let ((i12 j)) (let ((b103 ((anf py-list?) e11))) (let ((b102 (if b103 ((anf py-list-ref) e11 i12) (let ((b104 ((anf tuple?) e11))) (if b104 ((anf tuple-ref) e11 i12) (let ((b105 ((anf dict?) e11))) (if b105 ((anf dict-ref) e11 i12) (error cannot index object)))))))) (let ((b101 b102)) (let ((b100 b101)) (let ((b99 b100)) (let ((b106 ((anf not-equal?) c b99))) (let ((b98 (if b106 (let ((b107 (break))) b107) (let ((b108 ((anf +) j 1))) (let ((_109 (set! j b108))) (let ((_110 (void))) (let ((b112 ((anf -) j i))) (let ((b113 (len p))) (let ((b114 ((anf equal?) b112 b113))) (let ((b111 (if b114 (let ((b115 (return #t))) b115) (void)))) b111)))))))))) (let ((b97 b98)) b97))))))))))))))))) (b94 p b116))))))) (let ((b119 ((anf +) i 1))) (let ((_120 (set! i b119))) (let ((b118 (void))) b118)))))))))) (let ((b122 (loop))) b122)) (void))))))))) (let ((_124 (set! loop b123))) (let ((_125 (void))) (let ((_126 (loop))) (let ((b127 (void))) b127)))))))))) (let ((b129 (return #f))) b129)))))))))) #hasheq((set . #(struct:BAddr set ())) (b22 . #(struct:BAddr b22 ())) (break . #(struct:BAddr break ())) (continue . #(struct:BAddr continue ())) (_23 . #(struct:BAddr _23 ())) (len . #(struct:BAddr len ())) (_24 . #(struct:BAddr _24 ())) (b25 . #(struct:BAddr b25 ())) (_26 . #(struct:BAddr _26 ())) (object . #(struct:BAddr object ())) (_27 . #(struct:BAddr _27 ())) (b31 . #(struct:BAddr b31 ())) (List . #(struct:BAddr List ())) (_32 . #(struct:BAddr _32 ())) (_33 . #(struct:BAddr _33 ())) (b37 . #(struct:BAddr b37 ())) (_38 . #(struct:BAddr _38 ())) (_39 . #(struct:BAddr _39 ())) (b43 . #(struct:BAddr b43 ())) (tuple . #(struct:BAddr tuple ())) (_44 . #(struct:BAddr _44 ())) (_45 . #(struct:BAddr _45 ())) (b46 . #(struct:BAddr b46 ())) (_47 . #(struct:BAddr _47 ())) (gbl-dict . #(struct:BAddr gbl-dict ())) (_48 . #(struct:BAddr _48 ())) (b49 . #(struct:BAddr b49 ())) (b50 . #(struct:BAddr b50 ())) (b51 . #(struct:BAddr b51 ())) (_52 . #(struct:BAddr _52 ())) (_53 . #(struct:BAddr _53 ())) (b54 . #(struct:BAddr b54 ())) (b55 . #(struct:BAddr b55 ())) (b58 . #(struct:BAddr b58 ())) (b59 . #(struct:BAddr b59 ())) (_60 . #(struct:BAddr _60 ())) (_61 . #(struct:BAddr _61 ())) (b62 . #(struct:BAddr b62 ())) (b63 . #(struct:BAddr b63 ())) (b66 . #(struct:BAddr b66 ())) (b67 . #(struct:BAddr b67 ())) (_68 . #(struct:BAddr _68 ())) (_69 . #(struct:BAddr _69 ())) (b70 . #(struct:BAddr b70 ())) (b71 . #(struct:BAddr b71 ())) (b75 . #(struct:BAddr b75 ())) (b76 . #(struct:BAddr b76 ())) (_77 . #(struct:BAddr _77 ())) (_78 . #(struct:BAddr _78 ())) (b79 . #(struct:BAddr b79 ())) (b80 . #(struct:BAddr b80 ())) (_81 . #(struct:BAddr _81 ())) (g$SCRIPT_PAT . #(struct:BAddr g$SCRIPT_PAT ())) (_82 . #(struct:BAddr _82 ())) (g$issubstring . #(struct:BAddr g$issubstring ())) (g$ls . #(struct:BAddr g$ls ())) (g$res . #(struct:BAddr g$res ())) ($current-handler . #(struct:BAddr $current-handler ())) (return . #(struct:BAddr return ()))))
g$ls: 
	 object: 
		#hash(("__type__" . #<set: "instPyList">) ("__containerdict__" . #<set: #<OLoc>>) ("__class__" . #<set: List>))
g$res: 
	#t
$current-handler: 
return: 
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
	#<kontP>
