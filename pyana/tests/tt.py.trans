(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define b (void))
 (define y (void))
 (define a (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict18)
    (call/ec
     (lambda (return)
       (let (($localo19
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo19 "__init__") tmp-dict18)
         (return $localo19))))))
 (set-global!
  set
  (lambda (tmp-dict21)
    (call/ec
     (lambda (return)
       (let (($localo22
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo22 "__init__") tmp-dict21)
         (return $localo22))))))
 (set-global!
  tuple
  (lambda (tmp-dict24)
    (call/ec
     (lambda (return)
       (let (($localo25
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo25 "__init__") tmp-dict24)
         (return $localo25))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self26 tmpdict27)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict27)
           (set-field!
            self26
            "__containerdict__"
            (dict-ref tmpdict27 "__containerdict__"))
           (set-field! self26 "__containerdict__" tmpdict27))))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self28 tmpdict29)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict29)
           (set-field!
            self28
            "__containerdict__"
            (dict-ref tmpdict29 "__containerdict__"))
           (set-field! self28 "__containerdict__" tmpdict29))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self30 tmp-dict31)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict31) (tuple? tmp-dict31) (set? tmp-dict31))
           (set-field!
            self30
            "__containerdict__"
            (dict-ref tmp-dict31 "__containerdict__"))
           (set-field! self30 "__containerdict__" tmp-dict31))))))))
 (set-global! a ((get-global List) (dict (0 0) (1 1) (2 2) (3 3))))
 (let ((b11 (get-global a)))
   (let ((i12 1))
     (cond
      ((py-list? b11)
       (py-list-set!
        b11
        i12
        ((get-global List) (dict (0 "1") (1 "2") (2 "3")))))
      ((dict? b11)
       (dict-set!
        b11
        i12
        ((get-global List) (dict (0 "1") (1 "2") (2 "3"))))))))
 (set-global!
  y
  (let ((e13 (get-global a)))
    (let ((i14 1))
      (cond
       ((py-list? e13) (py-list-ref e13 i14))
       ((tuple? e13) (tuple-ref e13 i14))
       ((dict? e13) (dict-ref e13 i14))
       (else (error "cannot index object"))))))
 (set-global!
  b
  (let ((e15 (get-global y)))
    (let ((i16 1))
      (cond
       ((py-list? e15) (py-list-ref e15 i16))
       ((tuple? e15) (tuple-ref e15 i16))
       ((dict? e15) (dict-ref e15 i16))
       (else (error "cannot index object"))))))
 (py-print (get-global y))
 (py-print (get-global b)))
