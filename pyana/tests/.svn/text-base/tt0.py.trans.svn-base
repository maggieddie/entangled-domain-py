(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define foo (void))
 (define b (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict14)
    (call/ec
     (lambda (return)
       (let (($localo15
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo15 "__init__") tmp-dict14)
         (return $localo15))))))
 (set-global!
  set
  (lambda (tmp-dict17)
    (call/ec
     (lambda (return)
       (let (($localo18
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo18 "__init__") tmp-dict17)
         (return $localo18))))))
 (set-global!
  tuple
  (lambda (tmp-dict20)
    (call/ec
     (lambda (return)
       (let (($localo21
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo21 "__init__") tmp-dict20)
         (return $localo21))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self22 tmpdict23)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict23)
           (set-field!
            self22
            "__containerdict__"
            (dict-ref tmpdict23 "__containerdict__"))
           (set-field! self22 "__containerdict__" tmpdict23))))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self24 tmpdict25)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict25)
           (set-field!
            self24
            "__containerdict__"
            (dict-ref tmpdict25 "__containerdict__"))
           (set-field! self24 "__containerdict__" tmpdict25))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self26 tmp-dict27)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict27) (tuple? tmp-dict27) (set? tmp-dict27))
           (set-field!
            self26
            "__containerdict__"
            (dict-ref tmp-dict27 "__containerdict__"))
           (set-field! self26 "__containerdict__" tmp-dict27))))))))
 (set-global!
  foo
  (lambda ()
    (call/ec
     (lambda (return) (let () (return (dict ("a" "hi") ("b" 2) ("c" 3))))))))
 (set-global!
  b
  (let ((e11 ((get-global foo))))
    (let ((i12 "a"))
      (cond
       ((py-list? e11) (py-list-ref e11 i12))
       ((tuple? e11) (tuple-ref e11 i12))
       ((dict? e11) (dict-ref e11 i12))
       (else (error "cannot index object"))))))
 (py-print (get-global b)))
