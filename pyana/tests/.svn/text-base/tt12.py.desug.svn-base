(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define g$b (void))
 (define g$g (void))
 (define g$a (void))
 (define g$c (void))
 (define g$f (void))
 (begin
   (set! object (lambda () (void)))
   (set! List
     (lambda (tmp-dict20)
       (call/ec
        (lambda (return)
          (let (($localo21
                 (dict ("__class__" List) ("__type__" "instPyList"))))
            (begin
              ((get-field $localo21 "__init__") tmp-dict20)
              (return $localo21)))))))
   (set! set
     (lambda (tmp-dict23)
       (call/ec
        (lambda (return)
          (let (($localo24 (dict ("__class__" set) ("__type__" "instSet"))))
            (begin
              ((get-field $localo24 "__init__") tmp-dict23)
              (return $localo24)))))))
   (set! tuple
     (lambda (tmp-dict26)
       (call/ec
        (lambda (return)
          (let (($localo27
                 (dict ("__class__" tuple) ("__type__" "instTuple"))))
            (begin
              ((get-field $localo27 "__init__") tmp-dict26)
              (return $localo27)))))))
   (set! gbl-dict (dict))
   (dict-set!
    gbl-dict
    object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (dict-set!
    gbl-dict
    List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self28 tmpdict29)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict29)
             (set-field!
              self28
              "__containerdict__"
              (dict-ref tmpdict29 "__containerdict__"))
             (set-field! self28 "__containerdict__" tmpdict29))))))))
   (dict-set!
    gbl-dict
    set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self30 tmpdict31)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict31)
             (set-field!
              self30
              "__containerdict__"
              (dict-ref tmpdict31 "__containerdict__"))
             (set-field! self30 "__containerdict__" tmpdict31))))))))
   (dict-set!
    gbl-dict
    tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self32 tmp-dict33)
        (call/ec
         (lambda (return)
           (if (let ((t11 (py-list? tmp-dict33)))
                 (begin
                   (if t11
                     t11
                     (let ((t12 (tuple? tmp-dict33)))
                       (begin (if t12 t12 (set? tmp-dict33)))))))
             (set-field!
              self32
              "__containerdict__"
              (dict-ref tmp-dict33 "__containerdict__"))
             (set-field! self32 "__containerdict__" tmp-dict33))))))))
   (set! g$f
     (lambda ()
       (call/ec (lambda (return) (begin (py-print "called f") (return 1))))))
   (set! g$g
     (lambda ()
       (call/ec (lambda (return) (begin (py-print "called g") (return 0))))))
   (set! g$a
     (List
      (dict
       (0 (List (dict (0 10) (1 20))))
       (1 (List (dict (0 30) (1 40))))
       (2 (List (dict (0 50) (1 60)))))))
   (set! g$b
     (let ((e13
            (let ((e11 g$a))
              (begin
                (let ((i12 (g$f)))
                  (begin
                    (if (py-list? e11)
                      (py-list-ref e11 i12)
                      (if (tuple? e11)
                        (tuple-ref e11 i12)
                        (if (dict? e11)
                          (dict-ref e11 i12)
                          (error "cannot index object"))))))))))
       (begin
         (let ((i14 (g$g)))
           (begin
             (if (py-list? e13)
               (py-list-ref e13 i14)
               (if (tuple? e13)
                 (tuple-ref e13 i14)
                 (if (dict? e13)
                   (dict-ref e13 i14)
                   (error "cannot index object")))))))))
   (set! g$c
     (+
      g$b
      (let ((e17
             (let ((e15 g$a))
               (begin
                 (let ((i16 (g$g)))
                   (begin
                     (if (py-list? e15)
                       (py-list-ref e15 i16)
                       (if (tuple? e15)
                         (tuple-ref e15 i16)
                         (if (dict? e15)
                           (dict-ref e15 i16)
                           (error "cannot index object"))))))))))
        (begin
          (let ((i18 (g$f)))
            (begin
              (if (py-list? e17)
                (py-list-ref e17 i18)
                (if (tuple? e17)
                  (tuple-ref e17 i18)
                  (if (dict? e17)
                    (dict-ref e17 i18)
                    (error "cannot index object"))))))))))))
