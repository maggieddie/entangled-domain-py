(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define g$v4 (void))
 (define g$v1 (void))
 (define g$v3 (void))
 (define g$v5 (void))
 (define g$v2 (void))
 (begin
   (set! object (lambda () (void)))
   (set! List
     (lambda (tmp-dict22)
       (call/ec
        (lambda (return)
          (let (($localo23
                 (dict ("__class__" List) ("__type__" "instPyList"))))
            (begin
              ((get-field $localo23 "__init__") tmp-dict22)
              (return $localo23)))))))
   (set! set
     (lambda (tmp-dict25)
       (call/ec
        (lambda (return)
          (let (($localo26 (dict ("__class__" set) ("__type__" "instSet"))))
            (begin
              ((get-field $localo26 "__init__") tmp-dict25)
              (return $localo26)))))))
   (set! tuple
     (lambda (tmp-dict28)
       (call/ec
        (lambda (return)
          (let (($localo29
                 (dict ("__class__" tuple) ("__type__" "instTuple"))))
            (begin
              ((get-field $localo29 "__init__") tmp-dict28)
              (return $localo29)))))))
   (set! gbl-dict (dict))
   (dict-set!
    gbl-dict
    object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (dict-set!
    gbl-dict
    List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self30 tmpdict31)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict31)
             (set-field!
              self30
              "__containerdict__"
              (dict-ref tmpdict31 "__containerdict__"))
             (set-field! self30 "__containerdict__" tmpdict31))))))))
   (dict-set!
    gbl-dict
    set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self32 tmpdict33)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict33)
             (set-field!
              self32
              "__containerdict__"
              (dict-ref tmpdict33 "__containerdict__"))
             (set-field! self32 "__containerdict__" tmpdict33))))))))
   (dict-set!
    gbl-dict
    tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self34 tmp-dict35)
        (call/ec
         (lambda (return)
           (if (let ((t11 (py-list? tmp-dict35)))
                 (begin
                   (if t11
                     t11
                     (let ((t12 (tuple? tmp-dict35)))
                       (begin (if t12 t12 (set? tmp-dict35)))))))
             (set-field!
              self34
              "__containerdict__"
              (dict-ref tmp-dict35 "__containerdict__"))
             (set-field! self34 "__containerdict__" tmp-dict35))))))))
   (set! g$v1
     (dict
      ("a" 1)
      ("b" (dict ("c" 2)))
      ("d" (List (dict (0 "hi") (1 (dict (#f "bar"))))))))
   (set! g$v2
     (let ((e11 g$v1))
       (begin
         (let ((i12 "b"))
           (begin
             (if (py-list? e11)
               (py-list-ref e11 i12)
               (if (tuple? e11)
                 (tuple-ref e11 i12)
                 (if (dict? e11)
                   (dict-ref e11 i12)
                   (error "cannot index object")))))))))
   (set! g$v3
     (let ((e13 g$v1))
       (begin
         (let ((i14 "d"))
           (begin
             (if (py-list? e13)
               (py-list-ref e13 i14)
               (if (tuple? e13)
                 (tuple-ref e13 i14)
                 (if (dict? e13)
                   (dict-ref e13 i14)
                   (error "cannot index object")))))))))
   (set! g$v4
     (let ((e15 g$v3))
       (begin
         (let ((i16 0))
           (begin
             (if (py-list? e15)
               (py-list-ref e15 i16)
               (if (tuple? e15)
                 (tuple-ref e15 i16)
                 (if (dict? e15)
                   (dict-ref e15 i16)
                   (error "cannot index object")))))))))
   (set! g$v5
     (let ((e19
            (let ((e17 g$v3))
              (begin
                (let ((i18 1))
                  (begin
                    (if (py-list? e17)
                      (py-list-ref e17 i18)
                      (if (tuple? e17)
                        (tuple-ref e17 i18)
                        (if (dict? e17)
                          (dict-ref e17 i18)
                          (error "cannot index object"))))))))))
       (begin
         (let ((i20 #f))
           (begin
             (if (py-list? e19)
               (py-list-ref e19 i20)
               (if (tuple? e19)
                 (tuple-ref e19 i20)
                 (if (dict? e19)
                   (dict-ref e19 i20)
                   (error "cannot index object")))))))))))
