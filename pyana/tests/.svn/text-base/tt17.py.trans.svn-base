(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define v4 (void))
 (define v1 (void))
 (define v3 (void))
 (define v5 (void))
 (define v2 (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict22)
    (call/ec
     (lambda (return)
       (let (($localo23
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo23 "__init__") tmp-dict22)
         (return $localo23))))))
 (set-global!
  set
  (lambda (tmp-dict25)
    (call/ec
     (lambda (return)
       (let (($localo26
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo26 "__init__") tmp-dict25)
         (return $localo26))))))
 (set-global!
  tuple
  (lambda (tmp-dict28)
    (call/ec
     (lambda (return)
       (let (($localo29
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo29 "__init__") tmp-dict28)
         (return $localo29))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self30 tmpdict31)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict31)
           (set-field!
            self30
            "__containerdict__"
            (dict-ref tmpdict31 "__containerdict__"))
           (set-field! self30 "__containerdict__" tmpdict31))))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self32 tmpdict33)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict33)
           (set-field!
            self32
            "__containerdict__"
            (dict-ref tmpdict33 "__containerdict__"))
           (set-field! self32 "__containerdict__" tmpdict33))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self34 tmp-dict35)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict35) (tuple? tmp-dict35) (set? tmp-dict35))
           (set-field!
            self34
            "__containerdict__"
            (dict-ref tmp-dict35 "__containerdict__"))
           (set-field! self34 "__containerdict__" tmp-dict35))))))))
 (set-global!
  v1
  (dict
   ("a" 1)
   ("b" (dict ("c" 2)))
   ("d" ((get-global List) (dict (0 "hi") (1 (dict (#f "bar"))))))))
 (set-global!
  v2
  (let ((e11 (get-global v1)))
    (let ((i12 "b"))
      (cond
       ((py-list? e11) (py-list-ref e11 i12))
       ((tuple? e11) (tuple-ref e11 i12))
       ((dict? e11) (dict-ref e11 i12))
       (else (error "cannot index object"))))))
 (set-global!
  v3
  (let ((e13 (get-global v1)))
    (let ((i14 "d"))
      (cond
       ((py-list? e13) (py-list-ref e13 i14))
       ((tuple? e13) (tuple-ref e13 i14))
       ((dict? e13) (dict-ref e13 i14))
       (else (error "cannot index object"))))))
 (set-global!
  v4
  (let ((e15 (get-global v3)))
    (let ((i16 0))
      (cond
       ((py-list? e15) (py-list-ref e15 i16))
       ((tuple? e15) (tuple-ref e15 i16))
       ((dict? e15) (dict-ref e15 i16))
       (else (error "cannot index object"))))))
 (set-global!
  v5
  (let ((e19
         (let ((e17 (get-global v3)))
           (let ((i18 1))
             (cond
              ((py-list? e17) (py-list-ref e17 i18))
              ((tuple? e17) (tuple-ref e17 i18))
              ((dict? e17) (dict-ref e17 i18))
              (else (error "cannot index object")))))))
    (let ((i20 #f))
      (cond
       ((py-list? e19) (py-list-ref e19 i20))
       ((tuple? e19) (tuple-ref e19 i20))
       ((dict? e19) (dict-ref e19 i20))
       (else (error "cannot index object")))))))
