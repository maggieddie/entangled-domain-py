#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 81 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 57 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 56
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1
          0 3916 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"all-defined-out"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 21 #"\"utils_cesk3_smt.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"../../main.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 19 3 33 #"\"../../examples/list-helpers.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 23 #"define-namespace-anchor"
0 0 4 3 1 #" "
0 0 14 3 3 #"top"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";; mapping from address to sym-meta"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 4 3 1 #" "
0 0 14 3 8 #"sym-info"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"hash-set!"
0 0 4 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 4 3 1 #" "
0 0 14 3 8 #"sym-info"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";; if exists, return the meta sym"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";; else #f"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"hash-has-key?"
0 0 4 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"hash-ref"
0 0 4 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 29 #";; kinda symbolic execute len"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sym-len?"
0 0 4 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 4 #"elem"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 20 3 1 #"'"
0 0 14 3 10 #"symbol-len"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"predicate-val?"
0 0 4 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 4 #"elem"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 20 3 1 #"'"
0 0 14 3 9 #"precicate"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-meta"
0 0 4 3 2 #"  "
0 0 14 3 11 #"ae-or-addr?"
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 4 3 1 #" "
0 0 14 3 4 #"addr"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 5 #"store"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"binding"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 14 #"\"get-meta: ~a\""
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 11 #"ae-or-addr?"
0 0 19 3 1 #" "
0 0 17 3 3 #";ae"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 7 #"binding"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 7 #"binding"
0 0 19 3 1 #" "
0 0 14 3 4 #"addr"
0 0 22 3 3 #")])"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 7 #"binding"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 11 #"smtsymtabe!"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 14 3 7 #"binding"
0 0 22 3 5 #"))]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 35 #";; currnelt there are three types  "
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"normal-meta?"
0 0 4 3 2 #"  "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 9 #"sym-meta?"
0 0 4 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 21 #";; for old in val set"
0 0 19 29 1 #"\n"
0 0 17 3 47 #";; we would like to extract the singleton oloc,"
0 0 19 29 1 #"\n"
0 0 17 3 30 #"; if yes, then return the oloc"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 39 #";; if not singletong oloc, report error"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 1 #" "
0 0 14 3 6 #"valset"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set->list"
0 0 19 3 1 #" "
0 0 14 3 6 #"valset"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"oloc"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 5 #"OLoc?"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"int"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 4 #"num?"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"addr"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 6 #"BAddr?"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 52 #";; There is something wrong there. maybe be careful!"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 34 #";; no, deal with-sym-len used this"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"symbol-len"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 8 #"sym-len?"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"predicate"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 14 #"predicate-val?"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 3 #"cnt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 19 3 1 #" "
0 0 14 3 6 #"resval"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 14 3 3 #"cnt"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 19 3 1 #" "
0 0 14 3 3 #"cnt"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 2 #" \""
0 0 19 3 4 #"More"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 7 #" entity"
0 0 19 3 3 #"  \""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 6 #"lstval"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"symbolic-len?"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-count"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set->list"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 10 #"symbol-len"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"predicate?"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set-count"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set->list"
0 0 19 3 1 #" "
0 0 14 3 1 #"d"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 20 3 1 #"'"
0 0 14 3 9 #"predicate"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 25 #";; deal with hte dict-set"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"deal-with-dictset"
0 0 19 3 2 #"  "
0 0 14 3 4 #"ae-b"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-f"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-v"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-b"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 17 3 3 #";; "
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 44 #";(define field-bind (benv-lookup benv ae-f))"
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"val-set"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"atom-eval"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-v"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 14 #"single-int-val"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 1 #" "
0 0 14 3 7 #"val-set"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"int"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 14 #"single-int-val"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 10 #"dict-set!:"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"set"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 10 #"integer!!!"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 14 3 14 #"single-int-val"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-name"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 9 #"dict-set!"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 3 #"smt"
0 0 19 3 1 #" "
0 0 19 3 6 #"symbol"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 3 #"is:"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 13 #"sym-meta-type"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-smt-name"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"gen-smt-var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"new-smt-name"
0 0 19 3 1 #" "
0 0 22 3 2 #"()"
0 0 19 3 1 #" "
0 0 14 3 7 #"IntList"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"new-smt-name"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"smt-sym-name"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"list->z3-list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 14 #"single-int-val"
0 0 22 3 6 #"))))))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"new-smt-name"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"+/s"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"len"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"smt-sym-name"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 17 3 39 #";(pretty-write partial-assumption-base)"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 9 #"displayln"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"format"
0 0 17 3 2 #" \""
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 7 #"current"
0 0 17 3 1 #" "
0 0 17 3 9 #"hash-bind"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #" ~a"
0 0 17 3 2 #"\" "
0 0 17 3 11 #"base-bind))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"hash-has-key?"
0 0 19 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"base"
0 0 19 3 1 #" "
0 0 19 3 4 #"bind"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 5 #"there"
0 0 19 3 1 #","
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 8 #"hash-ref"
0 0 19 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-sym-info"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sym-meta"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-smt-name"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"IntList"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-sym-info"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 23 #"newListSym-propogation!"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-sym-info"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"hash-has-key?"
0 0 19 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"base"
0 0 19 3 1 #" "
0 0 19 3 4 #"bind"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 5 #"there"
0 0 19 3 1 #","
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 8 #"hash-ref"
0 0 19 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 3 #"smt"
0 0 19 3 1 #" "
0 0 19 3 6 #"symble"
0 0 19 3 1 #" "
0 0 19 3 11 #"information"
0 0 19 3 1 #" "
0 0 19 3 3 #"NOT"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"dict"
0 0 19 3 1 #" "
0 0 19 3 3 #"set"
0 0 19 3 1 #"'"
0 0 19 3 1 #"s"
0 0 19 3 1 #" "
0 0 19 3 5 #"base:"
0 0 19 3 3 #" ~a"
0 0 19 3 3 #" \" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 3 #")])"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 10 #"dict-set!:"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"value"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"set"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"NOT"
0 0 19 3 1 #" "
0 0 19 3 10 #"integer!!!"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 14 3 14 #"single-int-val"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 3 #")])"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 17 3 61
#"; (define index-sym-info (addr-in-smt-sym-table? field-bind))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; to deal with the function call binding"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"deal-with-func-call-binding"
0 0 19 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 19 3 1 #" "
0 0 14 3 7 #"argvals"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"for"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 6 #"argval"
0 0 19 3 1 #" "
0 0 14 3 7 #"argvals"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 2 #"ae"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 39 #";; usually singleton set for oloc list?"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-val"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 1 #" "
0 0 14 3 6 #"argval"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"oloc"
0 0 19 3 1 #" "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 9 #"displayln"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"format"
0 0 17 3 1 #" "
0 0 17 3 45 #"\"in dealing with function binding ae: ~a ~a \""
0 0 17 3 1 #" "
0 0 17 3 2 #"ae"
0 0 17 3 1 #" "
0 0 17 3 8 #"argval))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 2 #";("
0 0 17 3 9 #"displayln"
0 0 17 3 1 #" "
0 0 17 3 9 #"oloc-val)"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 1 #" "
0 0 14 3 6 #"argval"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"int"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 1 #" "
0 0 14 3 6 #"argval"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"addr"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 30 #"deal-with-single-abstract-type"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-val"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 17 3 52 #";     (deal-with-single-oloc #f #f #f bind oloc-val)"
0 0 19 29 1 #"\n"
0 0 17 3 50 #";     (deal-with-single-int #f #f #f bind int-val)"
0 0 19 29 1 #"\n"
0 0 17 3 52 #";     (deal-with-single-addr #f #f #f bind addr-val)"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 25 #"deal-with-sym-len-or-pred"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"symbol-len"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 25 #"deal-with-sym-len-or-pred"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"predicate"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"constr-property-formula"
0 0 19 3 1 #" "
0 0 14 3 12 #"govenor-base"
0 0 19 3 1 #" "
0 0 14 3 12 #"base-smt-var"
0 0 19 3 1 #" "
0 0 14 3 13 #"index-smt-var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 10 #"conditions"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"set->list"
0 0 19 3 1 #" "
0 0 14 3 12 #"govenor-base"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 27 #";; currently let's do this:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 11 #"conditions2"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 19 3 1 #" "
0 0 14 3 10 #"conditions"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 13 #"index-smt-var"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 10 #"smt:assert"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"=>/s"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"forall/s"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 5 #"and/s"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 26 3 2 #",@"
0 0 14 3 11 #"conditions2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 7 #"inBound"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 12 #"base-smt-var"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 13 #"index-smt-var"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 17 3 43 #";; for pylist-set reference and pylist-ref "
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 39 #"deal-with-list-ops-reference-and-verify"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-b"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-f"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 19 3 1 #" "
0 0 14 3 12 #"govenor-base"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-b"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 10 #"field-bind"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"ae-f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 14 #"index-sym-info"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 10 #"field-bind"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 2 #" \""
0 0 19 3 4 #"base"
0 0 19 3 1 #" "
0 0 19 3 3 #"sym"
0 0 19 3 1 #" "
0 0 19 3 3 #"var"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 6 #" found"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 12 #" pylist-set!"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 14 3 9 #"base-bind"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 14 #"index-sym-info"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 2 #" \""
0 0 19 3 5 #"index"
0 0 19 3 1 #" "
0 0 19 3 3 #"sym"
0 0 19 3 1 #" "
0 0 19 3 3 #"var"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 13 #" pyliset-set!"
0 0 19 3 2 #" \""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 14 #"index-sym-info"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 2 #" \""
0 0 19 3 5 #"index"
0 0 19 3 1 #" "
0 0 19 3 3 #"sym"
0 0 19 3 1 #" "
0 0 19 3 3 #"var"
0 0 19 3 1 #" "
0 0 19 3 7 #"smt-smt"
0 0 19 3 1 #" "
0 0 19 3 4 #"info"
0 0 19 3 1 #" "
0 0 19 3 3 #"all"
0 0 19 3 9 #" found!!!"
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 3 #"  \""
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"index"
0 0 19 3 1 #" "
0 0 19 3 4 #"name"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 19 3 1 #" "
0 0 14 3 14 #"index-sym-info"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-var"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 19 3 1 #" "
0 0 14 3 12 #"smt-sym-info"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 13 #"index-smt-var"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 19 3 1 #" "
0 0 14 3 14 #"index-sym-info"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 10 #"set-empty?"
0 0 4 3 1 #" "
0 0 14 3 12 #"govenor-base"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"print-proving-header"
0 0 4 3 1 #" "
0 0 14 3 3 #"exp"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"sat"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"constr-property-formula"
0 0 19 3 1 #" "
0 0 14 3 12 #"govenor-base"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-var"
0 0 19 3 1 #" "
0 0 14 3 13 #"index-smt-var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 13 #"smt:check-sat"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 33 #"; (pretty-write smt-symbol-table)"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 17 3 3 #";  "
0 0 17 3 14 #"(pretty-write "
0 0 17 3 24 #"partial-assumption-base)"
0 0 19 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 3 #"res"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"fire-Z3"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 20 #"print-proving-header"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 19 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 19 3 1 #" "
0 0 14 3 14 #"drop-last-two!"
0 0 22 3 3 #")])"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 2 #" \""
0 0 19 3 3 #"ref"
0 0 19 3 1 #" "
0 0 19 3 2 #"or"
0 0 19 3 1 #" "
0 0 19 3 3 #"set"
0 0 19 3 8 #" problem"
0 0 19 3 2 #" \""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 3 #")])"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 62
#";;;;; for each abstrac type, we have generate the symbol table"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"deal-with-single-oloc"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-res"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 17 3 12 #"; var = true"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 3 #"])]"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")])]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"deal-with-single-int"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"smt-var"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"gen-smt-var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 7 #"smt-var"
0 0 19 3 2 #"  "
0 0 22 3 2 #"()"
0 0 19 3 2 #"  "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 54 #"; (add-formula! `(smt:assert (=/s ,smt-var ,int-val)))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 17 3 9 #";var=true"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sym-meta"
0 0 19 3 1 #" "
0 0 14 3 7 #"smt-var"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sym-meta"
0 0 19 3 1 #" "
0 0 14 3 7 #"smt-var"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"Int"
0 0 22 3 4 #"))])"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"deal-with-single-addr"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 17 3 12 #"; var = true"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 3 #"])]"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")])]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 30 #"deal-with-single-abstract-type"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-val"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 13 #"hash-has-key?"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 32 #"\"deal-with-single-abstract-type "
0 0 19 3 1 #":"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"key"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 2 #"ae"
0 0 19 3 4 #" ~a\""
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-bind"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-meta"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-bind"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-meta"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 12 #"var-or-bind?"
0 0 4 3 1 #" "
0 0 17 3 12 #"; var = true"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-meta"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 4 3 1 #" "
0 0 14 3 4 #"bind"
0 0 4 3 1 #" "
0 0 14 3 7 #"ae-meta"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 5 #"])])]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 20 #"deal-with-single-int"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 7 #"int-val"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 21 #"deal-with-single-addr"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"addr-val"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 21 #"deal-with-single-oloc"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"oloc-val"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"get-len-sym"
0 0 4 3 1 #" "
0 0 14 3 7 #"len-arg"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 13 #"hash-has-key?"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 7 #"len-arg"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 13 #"\"get-len-sym "
0 0 19 3 1 #":"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"key"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 6 #"ae ~a\""
0 0 4 3 1 #" "
0 0 14 3 7 #"len-arg"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"lenarg-bind"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 4 3 1 #" "
0 0 14 3 4 #"benv"
0 0 4 3 1 #" "
0 0 14 3 7 #"len-arg"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"lenarg-meta"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 4 3 1 #" "
0 0 14 3 11 #"lenarg-bind"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 17 #"sym-meta-sym-name"
0 0 4 3 1 #" "
0 0 14 3 11 #"lenarg-meta"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 71
(
 #"\"should not be possible that the len arg don't have binding in benv"
 #"!~a\""
) 0 0 4 3 1 #" "
0 0 14 3 7 #"len-arg"
0 0 22 3 5 #"))]))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 39 #";; the symbol will dealth differently, "
0 0 19 29 1 #"\n"
0 0 17 3 43 #";; if the value of a binding is symbol-len,"
0 0 19 29 1 #"\n"
0 0 17 3 53 #";; we will go to the symbol table to find its address"
0 0 19 29 1 #"\n"
0 0 17 3 26 #";; toget its meta formula."
0 0 19 29 1 #"\n"
0 0 17 3 45 #";; then propafate the information to the new "
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; len-or-predi = symbol-len or predicate"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"deal-with-sym-len-or-pred"
0 0 19 3 1 #" "
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 19 3 2 #"  "
0 0 14 3 12 #"len-or-predi"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"hash-has-key?"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 18 #"deal-with-sym-len!"
0 0 19 3 1 #" "
0 0 19 3 1 #":"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"has"
0 0 19 3 1 #" "
0 0 19 3 3 #"key"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 2 #"ae"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 10 #"symset-val"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"atom-eval"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 5 #"store"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"singleton-type-set?"
0 0 19 3 2 #"  "
0 0 14 3 10 #"symset-val"
0 0 19 3 1 #" "
0 0 14 3 12 #"len-or-predi"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 7 #"sym-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 11 #"cur-ae-addr"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"addr-in-smt-sym-table?"
0 0 19 3 1 #" "
0 0 14 3 11 #"cur-ae-addr"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 2 #"[("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 12 #"var-or-bind?"
0 0 19 3 1 #" "
0 0 17 3 12 #"; var = true"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"benv-lookup"
0 0 19 3 1 #" "
0 0 14 3 4 #"benv"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 24 #"update-smt-symbol-table!"
0 0 19 3 1 #" "
0 0 14 3 4 #"bind"
0 0 19 3 1 #" "
0 0 14 3 8 #"meta-res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 3 #"])]"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")])]"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")])]"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 17 3 57 #";; if partially applied lambda, the ae will be location a"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 18 #"deal-with-sym-len!"
0 0 19 3 1 #" "
0 0 19 3 4 #"does"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 4 #"  ~a"
0 0 19 3 2 #"\" "
0 0 14 3 2 #"ae"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"smtop"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 19 3 4 #" \"/s"
0 0 19 3 1 #"\""
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"smtop2"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 2 #"e1"
0 0 19 3 1 #" "
0 0 14 3 2 #"e2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 2 #"e1"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 2 #"e2"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 14 3 10 #"not-equal?"
0 0 19 3 1 #" "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"=/s"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 2 #"e1"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 2 #"e2"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 19 3 4 #" \"/s"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 26 3 1 #","
0 0 14 3 2 #"e1"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 2 #"e2"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 36 #";; generate small counter as pointer"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 11 #"gen-smt-var"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 7 #"counter"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"])"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"smt-var"
0 0 22 3 2 #"])"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 7 #"counter"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"begin0"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"string->unreadable-symbol"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 6 #" \"~a~a"
0 0 19 3 2 #"\" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 7 #"counter"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 7 #"counter"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 19 3 1 #" "
0 0 14 3 7 #"counter"
0 0 22 3 7 #")))))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 23 #";; only Addr or IntList"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"struct"
0 0 19 3 1 #" "
0 0 14 3 8 #"sym-meta"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"sym-name"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 9 #"#:prefab)"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 37 #";; test whether it is list allocation"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"number-keys?"
0 0 19 3 1 #" "
0 0 14 3 8 #"lst-keys"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 19 3 1 #" "
0 0 14 3 8 #"lst-keys"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 14 #"just-the-first"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 19 3 1 #" "
0 0 14 3 8 #"lst-keys"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 14 #"just-the-first"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"symIntLst->rktIntList"
0 0 19 3 1 #" "
0 0 14 3 10 #"sym-intLst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 26 3 2 #",@"
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 19 3 2 #"  "
0 0 14 3 8 #"identity"
0 0 19 3 1 #" "
0 0 14 3 10 #"sym-intLst"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 17 #";; easy interface"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 68
#";;; I think I will just make the assumption base the global at first"
0 0 19 29 1 #"\n"
0 0 17 3 48 #";;; rather than make it into the state component"
0 0 19 29 1 #"\n"
0 0 17 3 28 #";; to start an empty formula"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 21 #"; to append a formula"
0 0 19 29 1 #"\n"
0 0 17 3 26 #";; like the form (formula)"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"add-formula!"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-lst-elem"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-lst-elem"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 51 #";; after each assertion of the range checking, e.g."
0 0 19 29 1 #"\n"
0 0 17 3 46 #"; (smt:assert (>=/s smt-var18 (len smt-var2)))"
0 0 19 29 1 #"\n"
0 0 17 3 39 #"; we will need to eliminate the formua "
0 0 19 29 1 #"\n"
0 0 17 3 54 #"; otherwise, there will be confusion of sat and unsat "
0 0 19 29 1 #"\n"
0 0 17 3 54 #"; for the reason of too many bound checking assertions"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"drop-last-two!"
0 0 19 3 1 #" "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"drop-right"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 35 #";(append base (list new-lst-elem)))"
0 0 19 29 1 #"\n"
0 0 17 3 42 #";; like the form (list (formula) (formua))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-formulas!"
0 0 19 3 2 #"  "
0 0 14 3 9 #"lst-forms"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 19 3 1 #" "
0 0 14 3 23 #"partial-assumption-base"
0 0 19 3 1 #" "
0 0 14 3 9 #"lst-forms"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 25 #";(append base lst-forms))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 56 #";; helpers to get all the z3 symbols for a given formula"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 32 #";; helper to udpate some formula"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 17 3 40 #";; detect the list pattern, aymaybe used"
0 0 19 29 1 #"\n"
0 0 17 3 47 #";; if yes, then the single argument will return"
0 0 19 29 1 #"\n"
0 0 17 3 23 #";; otherwise, return #f"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"is-List-alloc-site?"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 4 #"List"
0 0 19 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 85
(
 #";;; the interface to fire Z3 with the accumulated formulas list pass"
 #"ed at some point."
) 0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"fire-Z3"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 8 #"base-lst"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 14 3 16 #"smt:with-context"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:new-context"
0 0 19 3 1 #" "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 12 #"parameterize"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"current-namespace"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-namespace"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 3 #"len"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-length"
0 0 19 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 6 #"append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-append"
0 0 19 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 17 3 2 #";;"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 15 #"smt:declare-fun"
0 0 19 3 1 #" "
0 0 14 3 3 #"LEN"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"Array"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 14 #"smt:define-fun"
0 0 19 3 1 #" "
0 0 14 3 7 #"inBound"
0 0 22 3 1 #"("
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"arr"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Array"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 3 #"Int"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 19 29 1 #"\n"
0 0 19 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 5 #"ite/s"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #">=/s"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"LEN"
0 0 19 3 1 #" "
0 0 14 3 3 #"arr"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 20 3 2 #"#t"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 25 #"                         "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 26 3 2 #",@"
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 18 #"log-proved-formula"
0 0 4 3 1 #" "
0 0 14 3 8 #"base-lst"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"parameterize"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"current-namespace"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"namespace-anchor->namespace"
0 0 19 3 1 #" "
0 0 14 3 3 #"top"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"eval"
0 0 19 3 2 #"  "
0 0 14 3 8 #"base-lst"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"log-proved-formula"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 4 3 1 #" "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"fn"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"last"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"regexp-split"
0 0 4 3 1 #" "
0 0 19 3 6 #"#rx\"/\""
0 0 4 3 1 #" "
0 0 14 3 12 #"passed-in-fp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"fnp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 20 #"\"sv-tests-part-res/\""
0 0 4 3 1 #" "
0 0 14 3 2 #"fn"
0 0 4 3 1 #" "
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"gensym"
0 0 22 3 2 #"))"
0 0 19 3 8 #" \".z3rkt"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"pretty-write"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 21 #"display-lines-to-file"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"fnp"
0 0 19 3 1 #" "
0 0 22 3 6 #"#:mode"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"text"
0 0 19 3 1 #" "
0 0 22 3 8 #"#:exists"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"replace"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"print-proving-header"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 19 3 1 #" "
0 0 14 3 3 #"res"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 4 #" \"\\n"
0 0 19 3 1 #"\""
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 11 #"....proving"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 9 #"following"
0 0 19 3 1 #" "
0 0 19 3 10 #"assumption"
0 0 19 3 1 #" "
0 0 19 3 4 #"base"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 11 #" expression"
0 0 19 3 3 #" \" "
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 28 #";(acc-lines! (list (format \""
0 0 17 3 30 #"~a\" partial-assumption-base)))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 19 3 1 #" "
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 11 #"***********"
0 0 19 3 1 #" "
0 0 19 3 7 #"Theorem"
0 0 19 3 1 #" "
0 0 19 3 6 #"Prover"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 5 #"fired"
0 0 19 3 8 #" ......."
0 0 19 3 1 #"\""
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 3 #"res"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"unsat"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Theorem"
0 0 19 3 1 #" "
0 0 19 3 6 #"prover"
0 0 19 3 1 #" "
0 0 19 3 4 #"says"
0 0 19 3 1 #" "
0 0 19 3 3 #"~a:"
0 0 19 3 2 #"  "
0 0 19 3 5 #"VALID"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 11 #" reference!"
0 0 19 3 2 #"\" "
0 0 14 3 3 #"res"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 10 #"acc-lines!"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Theorem"
0 0 19 3 1 #" "
0 0 19 3 6 #"prover"
0 0 19 3 1 #" "
0 0 19 3 4 #"says"
0 0 19 3 1 #" "
0 0 19 3 3 #"~a:"
0 0 19 3 1 #" "
0 0 19 3 7 #"INVALID"
0 0 19 3 1 #" "
0 0 19 3 5 #"array"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 11 #" reference!"
0 0 19 3 2 #"\" "
0 0 14 3 3 #"res"
0 0 22 3 5 #")))])"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 17 3 78
(
 #";; this is used to propagate the new smt-sym information to previous"
 #" bindings."
) 0 0 19 29 1 #"\n"
0 0 17 3 37 #";; the previous formulas still exits."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"newListSym-propogation!"
0 0 19 3 1 #" "
0 0 14 3 12 #"old-sym-meta"
0 0 19 3 1 #" "
0 0 14 3 12 #"new-sym-meta"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 7 #"entries"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"hash->list"
0 0 19 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 25 #"entires-with-old-sym-meta"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"en"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 13 #"sym-meta-info"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 2 #"en"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                                           "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 14 3 13 #"sym-meta-info"
0 0 19 3 1 #" "
0 0 14 3 12 #"old-sym-meta"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 3 #"old"
0 0 19 3 1 #" "
0 0 19 3 3 #"sym"
0 0 19 3 1 #" "
0 0 19 3 4 #"meta"
0 0 19 3 1 #" "
0 0 19 3 5 #"info!"
0 0 19 3 3 #" ~a"
0 0 19 3 2 #"\" "
0 0 14 3 12 #"old-sym-meta"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                                            "
0 0 14 3 13 #"sym-meta-info"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                                           "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 19 3 2 #" \""
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 3 #"old"
0 0 19 3 1 #" "
0 0 19 3 3 #"sym"
0 0 19 3 1 #" "
0 0 19 3 4 #"meta"
0 0 19 3 1 #" "
0 0 19 3 5 #"info!"
0 0 19 3 1 #" "
0 0 19 3 3 #"~a\""
0 0 24 3 1 #" "
0 0 14 3 12 #"old-sym-meta"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 20 3 2 #"#f"
0 0 22 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 7 #"entries"
0 0 24 3 1 #" "
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 11 #";; propagte"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"for"
0 0 24 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 2 #"en"
0 0 24 3 1 #" "
0 0 14 3 25 #"entires-with-old-sym-meta"
0 0 22 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"en"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"smt-symbol-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-sym-meta"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0           0
