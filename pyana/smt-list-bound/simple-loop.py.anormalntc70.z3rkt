(smt:with-context (smt:new-context) (parameterize ((current-namespace (current-namespace))) (define len (make-length 10)) (define append (make-append 10)) (smt:declare-fun LEN ((Array Int Int)) Int) (smt:define-fun inBound ((arr (Array Int Int)) (x Int)) Bool (ite/s (and (>=/s x 0) (>=/s (LEN arr) x)) #t #f)) (smt:declare-fun smt-var0 () (Array Int Int)) (smt:declare-fun smt-var1 () (Array Int Int)) (smt:declare-fun smt-var2 () Int) (smt:declare-fun smt-var3 () Int) (smt:declare-fun smt-var4 () Int) (smt:declare-fun smt-var5 () Int) (smt:declare-fun smt-var6 () Int) (smt:declare-fun smt-var7 () Int) (smt:declare-fun smt-var8 () Int) (smt:declare-fun smt-var9 () Int) (smt:declare-fun smt-var10 () Int) (smt:declare-fun smt-var11 () Int) (smt:declare-fun smt-var12 () Int) (smt:declare-fun smt-var13 () Int) (smt:declare-fun smt-var14 () Int) (smt:declare-fun smt-var15 () Int) (smt:declare-fun smt-var16 () Int) (smt:declare-fun smt-var17 () Int) (smt:declare-fun smt-var18 () Int) (smt:declare-fun smt-var19 () Int) (smt:declare-fun smt-var20 () Int) (smt:declare-fun smt-var21 () Int) (smt:declare-fun smt-var22 () Int) (smt:declare-fun smt-var23 () Int) (smt:declare-fun smt-var24 () Int) (smt:declare-fun smt-var25 () Int) (smt:declare-fun smt-var26 () Int) (smt:declare-fun smt-var27 () Int) (smt:declare-fun smt-var28 () Int) (smt:assert (not (=>/s (forall/s ((x Int)) (and/s (</s smt-var2 (LEN smt-var1)) (</s smt-var7 (LEN smt-var1)) (</s smt-var12 (LEN smt-var1)) (</s smt-var17 (LEN smt-var1)) (</s smt-var27 (LEN smt-var1)) (</s smt-var22 (LEN smt-var1)) (smt:assert (>=/s smt-var28 0)))) (inBound smt-var1 smt-var28)))) (smt:check-sat)))
