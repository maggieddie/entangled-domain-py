(smt:with-context (smt:new-context) (parameterize ((current-namespace (current-namespace))) (define len (make-length 10)) (define append (make-append 10)) (smt:declare-fun LEN ((Array Int Int)) Int) (smt:define-fun inBound ((arr (Array Int Int)) (x Int)) Bool (ite/s (and (>=/s x 0) (>=/s (LEN arr) x)) #t #f)) (smt:declare-fun smt-var0 () (Array Int Int)) (smt:declare-fun smt-var1 () (Array Int Int)) (smt:declare-fun smt-var2 () Int) (smt:declare-fun smt-var3 () Int) (smt:assert (not (=>/s (forall/s ((x Int)) (and/s (</s smt-var2 (LEN smt-var1)) (smt:assert (>=/s smt-var3 0)))) (inBound smt-var1 smt-var3)))) (smt:check-sat)))
