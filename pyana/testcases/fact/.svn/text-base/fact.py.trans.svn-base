(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define len (void))
 (define fact (void))
 (define res (void))
 (set-global!
  len
  (lambda (seq11)
    (call/ec
     (lambda (return)
       (let ((cnt12 0))
         (cond
          ((or (py-list? seq11) (set? seq11) (tuple? seq11))
           (let ((container13 (dict-ref seq11 "__containerdict__")))
             (for-each entry14 container13 (set! cnt12 (+ 1 cnt12)))
             (return cnt12)))
          (else
           (for-each entry14 seq11 (set! cnt12 (+ cnt12 1)))
           (return cnt12))))))))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict16)
    (call/ec
     (lambda (return)
       (let (($localo17
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo17 "__init__") tmp-dict16)
         (return $localo17))))))
 (set-global!
  set
  (lambda (tmp-dict19)
    (call/ec
     (lambda (return)
       (let (($localo20
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo20 "__init__") tmp-dict19)
         (return $localo20))))))
 (set-global!
  tuple
  (lambda (tmp-dict22)
    (call/ec
     (lambda (return)
       (let (($localo23
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo23 "__init__") tmp-dict22)
         (return $localo23))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self24 tmpdict25)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict25)
           (set-field!
            self24
            "__containerdict__"
            (dict-ref tmpdict25 "__containerdict__"))
           (set-field! self24 "__containerdict__" tmpdict25))))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self26 tmpdict27)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict27)
           (set-field!
            self26
            "__containerdict__"
            (dict-ref tmpdict27 "__containerdict__"))
           (set-field! self26 "__containerdict__" tmpdict27))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self28 tmp-dict29)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict29) (tuple? tmp-dict29) (set? tmp-dict29))
           (set-field!
            self28
            "__containerdict__"
            (dict-ref tmp-dict29 "__containerdict__"))
           (set-field! self28 "__containerdict__" tmp-dict29))))))))
 (set-global!
  fact
  (lambda (n)
    (call/ec
     (lambda (return)
       (let ()
         (cond
          ((equal? n 0) (let () (return 1)))
          (else (let () (return (* ((get-global fact) (- n 1)) n))))))))))
 (set-global! res ((get-global fact) 10))
 (py-print (get-global res)))
