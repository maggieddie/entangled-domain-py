(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define g$ss2 (void))
 (define g$ss (void))
 (define g$tpl3 (void))
 (define g$tpl (void))
 (define g$x (void))
 (define g$tpl4 (void))
 (define g$tpl2 (void))
 (define g$sl (void))
 (begin
   (set! object (lambda () (void)))
   (set! List
     (lambda (tmp-dict13)
       (call/ec
        (lambda (return)
          (let (($localo14
                 (dict ("__class__" List) ("__type__" "instPyList"))))
            (begin
              ((get-field $localo14 "__init__") tmp-dict13)
              (return $localo14)))))))
   (set! set
     (lambda (tmp-dict16)
       (call/ec
        (lambda (return)
          (let (($localo17 (dict ("__class__" set) ("__type__" "instSet"))))
            (begin
              ((get-field $localo17 "__init__") tmp-dict16)
              (return $localo17)))))))
   (set! tuple
     (lambda (tmp-dict19)
       (call/ec
        (lambda (return)
          (let (($localo20
                 (dict ("__class__" tuple) ("__type__" "instTuple"))))
            (begin
              ((get-field $localo20 "__init__") tmp-dict19)
              (return $localo20)))))))
   (set! gbl-dict
     (dict
      (object
       (dict
        ("__base__" (list))
        ("__mro__" (list object))
        ("__init__" (lambda v void))))
      (List
       (dict
        ("__base__" (list object))
        ("__mro__" (list List object))
        ("__init__"
         (lambda (self21 tmpdict22)
           (call/ec
            (lambda (return)
              (if (py-list? tmpdict22)
                (set-field!
                 self21
                 "__containerdict__"
                 (dict-ref tmpdict22 "__containerdict__"))
                (set-field! self21 "__containerdict__" tmpdict22))))))))
      (set
       (dict
        ("__base__" (list object))
        ("__mro__" (list set object))
        ("__init__"
         (lambda (self23 tmpdict24)
           (call/ec
            (lambda (return)
              (if (py-list? tmpdict24)
                (set-field!
                 self23
                 "__containerdict__"
                 (dict-ref tmpdict24 "__containerdict__"))
                (set-field! self23 "__containerdict__" tmpdict24))))))))
      (tuple
       (dict
        ("__base__" (list object))
        ("__mro__" (list tuple object))
        ("__init__"
         (lambda (self25 tmp-dict26)
           (call/ec
            (lambda (return)
              (if (let ((t11 (py-list? tmp-dict26)))
                    (begin
                      (if t11
                        t11
                        (let ((t12 (tuple? tmp-dict26)))
                          (begin (if t12 t12 (set? tmp-dict26)))))))
                (set-field!
                 self25
                 "__containerdict__"
                 (dict-ref tmp-dict26 "__containerdict__"))
                (set-field! self25 "__containerdict__" tmp-dict26))))))))))
   (set! g$ss (set (dict (0 "A") (1 "D") (2 "C"))))
   (py-print g$ss)
   (py-print (len g$ss))
   (call/ec
    (lambda (break)
      ((lambda ($seq13 $loop14)
         (begin (begin (for-container $seq13 $loop14) (void))))
       g$ss
       (lambda (i11)
         (call/ec
          (lambda (continue)
            (begin (set! g$x i11) (begin (py-print g$x)))))))))
   (set! g$sl (List (dict (0 "hi") (1 "there"))))
   (set! g$ss2 (set g$sl))
   (py-print g$ss2)
   (py-print "test-tuple......")
   (set! g$tpl (tuple (dict (0 "Super") (1 "Cool"))))
   (set! g$tpl2 (tuple g$sl))
   (set! g$tpl3 (tuple g$tpl2))
   (set! g$tpl4 (tuple g$ss))
   (py-print g$tpl)
   (py-print g$tpl2)
   (py-print g$tpl3)
   (py-print g$tpl4)
   (py-print
    (tuple
     (tuple
      (dict
       (0 (List (dict (0 1) (1 2))))
       (1 "test")
       (2 (set (dict (0 "nested"))))))))
   (py-print ((get-field g$tpl "index") "Cool"))
   (py-print ((get-field g$tpl "count") "Super"))))
