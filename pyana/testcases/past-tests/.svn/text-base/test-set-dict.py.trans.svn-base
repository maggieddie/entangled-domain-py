(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define ss2 (void))
 (define ss (void))
 (define tpl3 (void))
 (define tpl (void))
 (define x (void))
 (define tpl4 (void))
 (define tpl2 (void))
 (define sl (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict13)
    (call/ec
     (lambda (return)
       (let (($localo14
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo14 "__init__") tmp-dict13)
         (return $localo14))))))
 (set-global!
  set
  (lambda (tmp-dict16)
    (call/ec
     (lambda (return)
       (let (($localo17
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo17 "__init__") tmp-dict16)
         (return $localo17))))))
 (set-global!
  tuple
  (lambda (tmp-dict19)
    (call/ec
     (lambda (return)
       (let (($localo20
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo20 "__init__") tmp-dict19)
         (return $localo20))))))
 (set-global!
  gbl-dict
  (dict
   (object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self21 tmpdict22)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict22)
             (set-field!
              self21
              "__containerdict__"
              (dict-ref tmpdict22 "__containerdict__"))
             (set-field! self21 "__containerdict__" tmpdict22))))))))
   (set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self23 tmpdict24)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict24)
             (set-field!
              self23
              "__containerdict__"
              (dict-ref tmpdict24 "__containerdict__"))
             (set-field! self23 "__containerdict__" tmpdict24))))))))
   (tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self25 tmp-dict26)
        (call/ec
         (lambda (return)
           (if (or (py-list? tmp-dict26) (tuple? tmp-dict26) (set? tmp-dict26))
             (set-field!
              self25
              "__containerdict__"
              (dict-ref tmp-dict26 "__containerdict__"))
             (set-field! self25 "__containerdict__" tmp-dict26))))))))))
 (set-global! ss ((get-global set) (dict (0 "A") (1 "D") (2 "C"))))
 (py-print (get-global ss))
 (py-print (len (get-global ss)))
 (for-each
  i11
  (get-global ss)
  (begin (set-global! x i11) (let () (py-print (get-global x)))))
 (set-global! sl ((get-global List) (dict (0 "hi") (1 "there"))))
 (set-global! ss2 ((get-global set) (get-global sl)))
 (py-print (get-global ss2))
 (py-print "test-tuple......")
 (set-global! tpl ((get-global tuple) (dict (0 "Super") (1 "Cool"))))
 (set-global! tpl2 ((get-global tuple) (get-global sl)))
 (set-global! tpl3 ((get-global tuple) (get-global tpl2)))
 (set-global! tpl4 ((get-global tuple) (get-global ss)))
 (py-print (get-global tpl))
 (py-print (get-global tpl2))
 (py-print (get-global tpl3))
 (py-print (get-global tpl4))
 (py-print
  ((get-global tuple)
   ((get-global tuple)
    (dict
     (0 ((get-global List) (dict (0 1) (1 2))))
     (1 "test")
     (2 ((get-global set) (dict (0 "nested"))))))))
 (py-print ((get-field (get-global tpl) "index") "Cool"))
 (py-print ((get-field (get-global tpl) "count") "Super")))
