(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define var4 (void))
 (define var2 (void))
 (define var5 (void))
 (define var3 (void))
 (define var1 (void))
 (define var6 (void))
 (define Foo (void))
 (define g (void))
 (define f (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict13)
    (call/ec
     (lambda (return)
       (let (($localo14
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo14 "__init__") tmp-dict13)
         (return $localo14))))))
 (set-global!
  set
  (lambda (tmp-dict16)
    (call/ec
     (lambda (return)
       (let (($localo17
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo17 "__init__") tmp-dict16)
         (return $localo17))))))
 (set-global!
  tuple
  (lambda (tmp-dict19)
    (call/ec
     (lambda (return)
       (let (($localo20
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo20 "__init__") tmp-dict19)
         (return $localo20))))))
 (set-global!
  gbl-dict
  (dict
   (object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self21 tmpdict22)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict22)
             (set-field!
              self21
              "__containerdict__"
              (dict-ref tmpdict22 "__containerdict__"))
             (set-field! self21 "__containerdict__" tmpdict22))))))))
   (set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self23 tmpdict24)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict24)
             (set-field!
              self23
              "__containerdict__"
              (dict-ref tmpdict24 "__containerdict__"))
             (set-field! self23 "__containerdict__" tmpdict24))))))))
   (tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self25 tmp-dict26)
        (call/ec
         (lambda (return)
           (if (or (py-list? tmp-dict26) (tuple? tmp-dict26) (set? tmp-dict26))
             (set-field!
              self25
              "__containerdict__"
              (dict-ref tmp-dict26 "__containerdict__"))
             (set-field! self25 "__containerdict__" tmp-dict26))))))))))
 ((lambda ()
    (begin
      (set-global!
       Foo
       (lambda ()
         (call/ec
          (lambda (return)
            (let ((setx (void)) (bar (void)))
              (let (($localo11
                     (dict
                      ("__class__" (get-global Foo))
                      ("__type__" "instFoo"))))
                ((get-field $localo11 "__init__"))
                (return $localo11)))))))
      (dict-set!
       gbl-dict
       (get-global Foo)
       (dict
        ("__base__" (list object))
        ("__class__" (get-global Foo))
        ("__type__" "class")
        ("setx"
         (lambda (self x)
           (call/ec (lambda (return) (let () (set-field! self "x" x))))))
        ("bar"
         (lambda (self)
           (call/ec
            (lambda (return) (let () (return (get-field self "x")))))))))
      (dict-set!
       (dict-ref gbl-dict (get-global Foo))
       "__mro__"
       (list (get-global Foo) object)))))
 (set-global! f ((get-global Foo)))
 ((get-field (get-global f) "setx") 5)
 (set-global! var1 ((get-field (get-global f) "bar")))
 (py-print (get-global var1))
 ((get-field (get-global Foo) "setx") (get-global f) 500)
 (set-global! var2 ((get-field (get-global Foo) "bar") (get-global f)))
 (py-print (get-global var2))
 (set-field! (get-global Foo) "y" 10)
 (set-global! g ((get-global Foo)))
 (set-global! var3 (get-field (get-global g) "y"))
 (py-print (get-global var3))
 (set-field! (get-global g) "y" 9)
 (py-print "after setting g.y to 9")
 (set-global! var4 (get-field (get-global g) "y"))
 (py-print (get-global var4))
 (py-print "f.y should be the same to the Foo.y")
 (py-print "f.y = ")
 (set-global! var5 (get-field (get-global f) "y"))
 (py-print (get-global var5))
 (py-print "Foo.y = ")
 (set-global! var6 (get-field (get-global Foo) "y"))
 (py-print (get-global var6)))
