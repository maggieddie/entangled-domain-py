(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define b (void))
 (define t (void))
 (define a (void))
 (define u (void))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict23)
    (call/ec
     (lambda (return)
       (let (($localo24
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo24 "__init__") tmp-dict23)
         (return $localo24))))))
 (set-global!
  set
  (lambda (tmp-dict26)
    (call/ec
     (lambda (return)
       (let (($localo27
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo27 "__init__") tmp-dict26)
         (return $localo27))))))
 (set-global!
  tuple
  (lambda (tmp-dict29)
    (call/ec
     (lambda (return)
       (let (($localo30
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo30 "__init__") tmp-dict29)
         (return $localo30))))))
 (set-global!
  gbl-dict
  (dict
   (object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self31 tmpdict32)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict32)
             (set-field!
              self31
              "__containerdict__"
              (dict-ref tmpdict32 "__containerdict__"))
             (set-field! self31 "__containerdict__" tmpdict32))))))))
   (set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self33 tmpdict34)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict34)
             (set-field!
              self33
              "__containerdict__"
              (dict-ref tmpdict34 "__containerdict__"))
             (set-field! self33 "__containerdict__" tmpdict34))))))))
   (tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self35 tmp-dict36)
        (call/ec
         (lambda (return)
           (if (or (py-list? tmp-dict36) (tuple? tmp-dict36) (set? tmp-dict36))
             (set-field!
              self35
              "__containerdict__"
              (dict-ref tmp-dict36 "__containerdict__"))
             (set-field! self35 "__containerdict__" tmp-dict36))))))))))
 (set-global! t ((get-global tuple) (dict (0 12345) (1 54321) (2 "hello!"))))
 (py-print
  (let ((e11 (get-global t)))
    (let ((i12 0))
      (cond
       ((py-list? e11) (py-list-ref e11 i12))
       ((tuple? e11) (tuple-ref e11 i12))
       ((dict? e11) (dict-ref e11 i12))
       (else (error "cannot index object"))))))
 (py-print (get-global t))
 (set-global!
  u
  ((get-global tuple)
   (dict
    (0 (get-global t))
    (1 ((get-global tuple) (dict (0 1) (1 2) (2 3) (3 4) (4 5)))))))
 (py-print
  (let ((e13 (get-global u)))
    (let ((i14 0))
      (cond
       ((py-list? e13) (py-list-ref e13 i14))
       ((tuple? e13) (tuple-ref e13 i14))
       ((dict? e13) (dict-ref e13 i14))
       (else (error "cannot index object"))))))
 (py-print
  (let ((e15 (get-global u)))
    (let ((i16 1))
      (cond
       ((py-list? e15) (py-list-ref e15 i16))
       ((tuple? e15) (tuple-ref e15 i16))
       ((dict? e15) (dict-ref e15 i16))
       (else (error "cannot index object"))))))
 (py-print (get-global u))
 (let ((t17
        ((get-global tuple)
         (dict (0 ((get-global List) (dict (0 100) (1 200)))) (1 "hi")))))
   (set-global!
    a
    (let ((e18 t17))
      (let ((i19 0))
        (cond
         ((py-list? e18) (py-list-ref e18 i19))
         ((tuple? e18) (tuple-ref e18 i19))
         ((dict? e18) (dict-ref e18 i19))
         (else (error "cannot index object"))))))
   (set-global!
    b
    (let ((e20 t17))
      (let ((i21 1))
        (cond
         ((py-list? e20) (py-list-ref e20 i21))
         ((tuple? e20) (tuple-ref e20 i21))
         ((dict? e20) (dict-ref e20 i21))
         (else (error "cannot index object")))))))
 (py-print (get-global a)))
