(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define len (void))
 (define g$result1 (void))
 (define g$result2 (void))
 (define g$rest (void))
 (define g$lst2 (void))
 (define g$msl (void))
 (define g$iter (void))
 (define g$msl2 (void))
 (define g$lst (void))
 (define g$client (void))
 (begin
   (set! len
     (lambda (seq19)
       (call/ec
        (lambda (return)
          (let ((cnt20 0))
            (begin
              (if (let ((t11 (py-list? seq19)))
                    (begin
                      (if t11
                        t11
                        (let ((t12 (set? seq19)))
                          (begin (if t12 t12 (tuple? seq19)))))))
                (let ((container21 (dict-ref seq19 "__containerdict__")))
                  (begin
                    (call/ec
                     (lambda (break)
                       ((lambda ($seq13 $loop14)
                          (begin
                            (begin (for-container $seq13 $loop14) (void))))
                        container21
                        (lambda (entry22)
                          (call/ec
                           (lambda (continue) (set! cnt20 (+ 1 cnt20))))))))
                    (return cnt20)))
                (cond
                 (else
                  (call/ec
                   (lambda (break)
                     ((lambda ($seq15 $loop16)
                        (begin (begin (for-container $seq15 $loop16) (void))))
                      seq19
                      (lambda (entry22)
                        (call/ec
                         (lambda (continue) (set! cnt20 (+ cnt20 1))))))))
                  (return cnt20))))))))))
   (set! object (lambda () (void)))
   (set! List
     (lambda (tmp-dict24)
       (call/ec
        (lambda (return)
          (let (($localo25
                 (dict ("__class__" List) ("__type__" "instPyList"))))
            (begin
              ((get-field $localo25 "__init__") tmp-dict24)
              (return $localo25)))))))
   (set! set
     (lambda (tmp-dict27)
       (call/ec
        (lambda (return)
          (let (($localo28 (dict ("__class__" set) ("__type__" "instSet"))))
            (begin
              ((get-field $localo28 "__init__") tmp-dict27)
              (return $localo28)))))))
   (set! tuple
     (lambda (tmp-dict30)
       (call/ec
        (lambda (return)
          (let (($localo31
                 (dict ("__class__" tuple) ("__type__" "instTuple"))))
            (begin
              ((get-field $localo31 "__init__") tmp-dict30)
              (return $localo31)))))))
   (set! gbl-dict (dict))
   (dict-set!
    gbl-dict
    object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (dict-set!
    gbl-dict
    List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self32 tmpdict33)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict33)
             (set-field!
              self32
              "__containerdict__"
              (dict-ref tmpdict33 "__containerdict__"))
             (set-field! self32 "__containerdict__" tmpdict33))))))
     ("append"
      (lambda (self34 elem35)
        (let ((max36 (len self34)))
          (begin
            (dict-set!
             (dict-ref self34 "__containerdict__")
             max36
             elem35)))))))
   (dict-set!
    gbl-dict
    set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self37 tmpdict38)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict38)
             (set-field!
              self37
              "__containerdict__"
              (dict-ref tmpdict38 "__containerdict__"))
             (set-field! self37 "__containerdict__" tmpdict38))))))))
   (dict-set!
    gbl-dict
    tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self39 tmp-dict40)
        (call/ec
         (lambda (return)
           (if (let ((t17 (py-list? tmp-dict40)))
                 (begin
                   (if t17
                     t17
                     (let ((t18 (tuple? tmp-dict40)))
                       (begin (if t18 t18 (set? tmp-dict40)))))))
             (set-field!
              self39
              "__containerdict__"
              (dict-ref tmp-dict40 "__containerdict__"))
             (set-field! self39 "__containerdict__" tmp-dict40))))))))
   (set! g$rest
     (lambda (lstr)
       (call/ec
        (lambda (return)
          (let ((res (void)))
            (let ((i (void)))
              (let ((total_len (void)))
                (begin
                  (set! res (List (dict)))
                  (set! total_len (len lstr))
                  (if (equal? total_len 0)
                    (begin (return lstr))
                    (if (equal? total_len 1)
                      (begin (return (List (dict))))
                      (begin
                        (set! i 1)
                        (call/ec
                         (lambda (break)
                           (let ((loop (void)))
                             (begin
                               (set! loop
                                 (lambda ()
                                   (if (< i total_len)
                                     (begin
                                       (call/ec
                                        (lambda (continue)
                                          (begin
                                            ((get-field res "append")
                                             (let ((e11 lstr))
                                               (begin
                                                 (begin
                                                   (let ((i12 i))
                                                     (begin
                                                       (begin
                                                         (if (py-list? e11)
                                                           (py-list-ref
                                                            e11
                                                            i12)
                                                           (if (tuple? e11)
                                                             (tuple-ref
                                                              e11
                                                              i12)
                                                             (if (dict? e11)
                                                               (dict-ref
                                                                e11
                                                                i12)
                                                               (error
                                                                "cannot index object")))))))))))
                                            (set! i (+ i 1)))))
                                       (loop))
                                     (void))))
                               (loop)
                               (void)))))
                        (return res))))))))))))
   (set! g$client
     (lambda (lstc mask_list)
       (call/ec
        (lambda (return)
          (let ((g (void)))
            (begin
              (set! g
                (lambda (j y)
                  (call/ec
                   (lambda (return)
                     (begin
                       (let ((b15 lstc))
                         (begin
                           (let ((i16 j))
                             (begin
                               (if (py-list? b15)
                                 (py-list-set!
                                  b15
                                  i16
                                  (bitwise-and
                                   y
                                   (let ((e13 mask_list))
                                     (begin
                                       (let ((i14 j))
                                         (begin
                                           (if (py-list? e13)
                                             (py-list-ref e13 i14)
                                             (if (tuple? e13)
                                               (tuple-ref e13 i14)
                                               (if (dict? e13)
                                                 (dict-ref e13 i14)
                                                 (error
                                                  "cannot index object"))))))))))
                                 (if (dict? b15)
                                   (dict-set!
                                    b15
                                    i16
                                    (bitwise-and
                                     y
                                     (let ((e13 mask_list))
                                       (begin
                                         (let ((i14 j))
                                           (begin
                                             (if (py-list? e13)
                                               (py-list-ref e13 i14)
                                               (if (tuple? e13)
                                                 (tuple-ref e13 i14)
                                                 (if (dict? e13)
                                                   (dict-ref e13 i14)
                                                   (error
                                                    "cannot index object"))))))))))
                                   (void))))))))))))
              (if (equal? (len lstc) (len mask_list))
                (begin (g$iter 0 mask_list g) (return lstc))
                (begin (return (List (dict)))))))))))
   (set! g$iter
     (lambda (index lsti func)
       (call/ec
        (lambda (return)
          (begin
            (if (equal? (len lsti) 0)
              (begin (return (List (dict))))
              (begin
                (func
                 index
                 (let ((e17 lsti))
                   (begin
                     (let ((i18 0))
                       (begin
                         (if (py-list? e17)
                           (py-list-ref e17 i18)
                           (if (tuple? e17)
                             (tuple-ref e17 i18)
                             (if (dict? e17)
                               (dict-ref e17 i18)
                               (error "cannot index object")))))))))
                (g$iter (+ index 1) (g$rest lsti) func))))))))
   (set! g$lst (List (dict (0 1) (1 2) (2 3) (3 4))))
   (set! g$msl (List (dict (0 0) (1 0) (2 0) (3 0))))
   (set! g$lst2 (List (dict (0 10) (1 20) (2 30) (3 40))))
   (set! g$msl2 (List (dict (0 1) (1 2) (2 3) (3 4))))
   (set! g$result1 (g$client g$lst g$msl))
   (set! g$result2 (g$client g$lst2 g$msl2))
   (py-print g$result1)
   (py-print g$result2)))
