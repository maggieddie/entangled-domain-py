(program
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define len (void))
 (define read_verts (void))
 (define test (void))
 (define emit_mesh (void))
 (define read_array (void))
 (set-global!
  len
  (lambda (seq17)
    (call/ec
     (lambda (return)
       (let ((cnt18 0))
         (cond
          ((or (py-list? seq17) (set? seq17) (tuple? seq17))
           (let ((container19 (dict-ref seq17 "__containerdict__")))
             (for-each entry20 container19 (set! cnt18 (+ 1 cnt18)))
             (return cnt18)))
          (else
           (for-each entry20 seq17 (set! cnt18 (+ cnt18 1)))
           (return cnt18))))))))
 (set-global! object (lambda () (void)))
 (set-global!
  List
  (lambda (tmp-dict22)
    (call/ec
     (lambda (return)
       (let (($localo23
              (dict
               ("__class__" (get-global List))
               ("__type__" "instPyList"))))
         ((get-field $localo23 "__init__") tmp-dict22)
         (return $localo23))))))
 (set-global!
  set
  (lambda (tmp-dict25)
    (call/ec
     (lambda (return)
       (let (($localo26
              (dict ("__class__" (get-global set)) ("__type__" "instSet"))))
         ((get-field $localo26 "__init__") tmp-dict25)
         (return $localo26))))))
 (set-global!
  tuple
  (lambda (tmp-dict28)
    (call/ec
     (lambda (return)
       (let (($localo29
              (dict
               ("__class__" (get-global tuple))
               ("__type__" "instTuple"))))
         ((get-field $localo29 "__init__") tmp-dict28)
         (return $localo29))))))
 (set-global! gbl-dict (dict))
 (dict-set!
  gbl-dict
  object
  (dict
   ("__base__" (list))
   ("__mro__" (list object))
   ("__init__" (lambda v void))))
 (dict-set!
  gbl-dict
  List
  (dict
   ("__base__" (list object))
   ("__mro__" (list List object))
   ("__init__"
    (lambda (self30 tmpdict31)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict31)
           (set-field!
            self30
            "__containerdict__"
            (dict-ref tmpdict31 "__containerdict__"))
           (set-field! self30 "__containerdict__" tmpdict31))))))
   ("append"
    (lambda (self32 elem33)
      (let ((max34 (len self32)))
        (dict-set! (dict-ref self32 "__containerdict__") max34 elem33))))))
 (dict-set!
  gbl-dict
  set
  (dict
   ("__base__" (list object))
   ("__mro__" (list set object))
   ("__init__"
    (lambda (self35 tmpdict36)
      (call/ec
       (lambda (return)
         (if (py-list? tmpdict36)
           (set-field!
            self35
            "__containerdict__"
            (dict-ref tmpdict36 "__containerdict__"))
           (set-field! self35 "__containerdict__" tmpdict36))))))))
 (dict-set!
  gbl-dict
  tuple
  (dict
   ("__base__" (list object))
   ("__mro__" (list tuple object))
   ("__init__"
    (lambda (self37 tmp-dict38)
      (call/ec
       (lambda (return)
         (if (or (py-list? tmp-dict38) (tuple? tmp-dict38) (set? tmp-dict38))
           (set-field!
            self37
            "__containerdict__"
            (dict-ref tmp-dict38 "__containerdict__"))
           (set-field! self37 "__containerdict__" tmp-dict38))))))))
 (set-global!
  read_array
  (lambda (a i lo hi)
    (call/ec
     (lambda (return)
       (let ((num (void)))
         (cond
          ((>= i (len a)) (let () (return (void))))
          (else
           (let ()
             (set! num ((get-global read_int)))
             (let ((b11 a))
               (let ((i12 i))
                 (cond
                  ((py-list? b11) (py-list-set! b11 i12 num))
                  ((dict? b11) (dict-set! b11 i12 num)))))
             (set! i (+ i 1))
             ((get-global read_array) a i lo hi)))))))))
 (set-global!
  read_verts
  (lambda ()
    (call/ec
     (lambda (return)
       (let () (return ((get-global List) (dict (0 1) (1 2) (2 3) (3 4)))))))))
 (set-global!
  emit_mesh
  (lambda (vrt mesh i)
    (call/ec
     (lambda (return)
       (let ((elem (void)) (elem_ind (void)))
         (cond
          ((>= i (len mesh)) (let () (return (void))))
          (else
           (let ()
             (set! elem_ind
               (let ((e13 mesh))
                 (let ((i14 i))
                   (cond
                    ((py-list? e13) (py-list-ref e13 i14))
                    ((tuple? e13) (tuple-ref e13 i14))
                    ((dict? e13) (dict-ref e13 i14))
                    (else (error "cannot index object"))))))
             (set! elem
               (let ((e15 vrt))
                 (let ((i16 elem_ind))
                   (cond
                    ((py-list? e15) (py-list-ref e15 i16))
                    ((tuple? e15) (tuple-ref e15 i16))
                    ((dict? e15) (dict-ref e15 i16))
                    (else (error "cannot index object"))))))
             (py-print elem)
             (set! i (+ i 1))
             ((get-global emit_mesh) vrt mesh i)))))))))
 (set-global!
  test
  (lambda ()
    (call/ec
     (lambda (return)
       (let ((vertex (void)) (mesh (void)))
         (set! vertex ((get-global read_verts)))
         (set! mesh ((get-global read_array) vertex 0 0 (len vertex)))
         ((get-global emit_mesh) vertex mesh 0)))))))
