(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define gbl-dict (void))
 (define object (void))
 (define List (void))
 (define set (void))
 (define tuple (void))
 (define len (void))
 (define g$srch1 (void))
 (define g$OR (void))
 (define g$srch2 (void))
 (define g$gen_malicious_input (void))
 (define g$test_init_input (void))
 (define g$Response (void))
 (define g$Request (void))
 (define g$issubstring (void))
 (define g$Search (void))
 (define g$lst_to_str (void))
 (define g$SCRIPT_PAT (void))
 (define g$mock_mal_strlst (void))
 (define g$CASE_SENSITIVE (void))
 (begin
   (set! len
     (lambda (seq31)
       (call/ec
        (lambda (return)
          (let ((cnt32 0))
            (begin
              (if (let ((t11 (py-list? seq31)))
                    (begin
                      (if t11
                        t11
                        (let ((t12 (set? seq31)))
                          (begin (if t12 t12 (tuple? seq31)))))))
                (let ((container33 (dict-ref seq31 "__containerdict__")))
                  (begin
                    (call/ec
                     (lambda (break)
                       ((lambda ($seq13 $loop14)
                          (begin
                            (begin (for-container $seq13 $loop14) (void))))
                        container33
                        (lambda (entry34)
                          (call/ec
                           (lambda (continue) (set! cnt32 (+ 1 cnt32))))))))
                    (return cnt32)))
                (cond
                 (else
                  (call/ec
                   (lambda (break)
                     ((lambda ($seq15 $loop16)
                        (begin (begin (for-container $seq15 $loop16) (void))))
                      seq31
                      (lambda (entry34)
                        (call/ec
                         (lambda (continue) (set! cnt32 (+ cnt32 1))))))))
                  (return cnt32))))))))))
   (set! object (lambda () (void)))
   (set! List
     (lambda (tmp-dict36)
       (call/ec
        (lambda (return)
          (let (($localo37
                 (dict ("__class__" List) ("__type__" "instPyList"))))
            (begin
              ((get-field $localo37 "__init__") tmp-dict36)
              (return $localo37)))))))
   (set! set
     (lambda (tmp-dict39)
       (call/ec
        (lambda (return)
          (let (($localo40 (dict ("__class__" set) ("__type__" "instSet"))))
            (begin
              ((get-field $localo40 "__init__") tmp-dict39)
              (return $localo40)))))))
   (set! tuple
     (lambda (tmp-dict42)
       (call/ec
        (lambda (return)
          (let (($localo43
                 (dict ("__class__" tuple) ("__type__" "instTuple"))))
            (begin
              ((get-field $localo43 "__init__") tmp-dict42)
              (return $localo43)))))))
   (set! gbl-dict (dict))
   (dict-set!
    gbl-dict
    object
    (dict
     ("__base__" (list))
     ("__mro__" (list object))
     ("__init__" (lambda v void))))
   (dict-set!
    gbl-dict
    List
    (dict
     ("__base__" (list object))
     ("__mro__" (list List object))
     ("__init__"
      (lambda (self44 tmpdict45)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict45)
             (set-field!
              self44
              "__containerdict__"
              (dict-ref tmpdict45 "__containerdict__"))
             (set-field! self44 "__containerdict__" tmpdict45))))))))
   (dict-set!
    gbl-dict
    set
    (dict
     ("__base__" (list object))
     ("__mro__" (list set object))
     ("__init__"
      (lambda (self46 tmpdict47)
        (call/ec
         (lambda (return)
           (if (py-list? tmpdict47)
             (set-field!
              self46
              "__containerdict__"
              (dict-ref tmpdict47 "__containerdict__"))
             (set-field! self46 "__containerdict__" tmpdict47))))))))
   (dict-set!
    gbl-dict
    tuple
    (dict
     ("__base__" (list object))
     ("__mro__" (list tuple object))
     ("__init__"
      (lambda (self48 tmp-dict49)
        (call/ec
         (lambda (return)
           (if (let ((t17 (py-list? tmp-dict49)))
                 (begin
                   (if t17
                     t17
                     (let ((t18 (tuple? tmp-dict49)))
                       (begin (if t18 t18 (set? tmp-dict49)))))))
             (set-field!
              self48
              "__containerdict__"
              (dict-ref tmp-dict49 "__containerdict__"))
             (set-field! self48 "__containerdict__" tmp-dict49))))))))
   (set! g$OR "OR")
   (set! g$CASE_SENSITIVE "Sensitive")
   (set! g$SCRIPT_PAT
     (List
      (dict (0 "<") (1 "s") (2 "c") (3 "r") (4 "i") (5 "p") (6 "t") (7 ">"))))
   (set! g$lst_to_str
     (lambda (lst)
       (call/ec
        (lambda (return)
          (let ((l (void)))
            (let ((i (void)))
              (let ((res_str (void)))
                (begin
                  (set! l (len lst))
                  (set! i 0)
                  (set! res_str "")
                  (call/ec
                   (lambda (break)
                     (let ((loop (void)))
                       (begin
                         (set! loop
                           (lambda ()
                             (if (< i l)
                               (begin
                                 (call/ec
                                  (lambda (continue)
                                    (begin
                                      (set! res_str
                                        (+
                                         res_str
                                         (let ((e11 lst))
                                           (begin
                                             (begin
                                               (let ((i12 i))
                                                 (begin
                                                   (begin
                                                     (if (py-list? e11)
                                                       (py-list-ref e11 i12)
                                                       (if (tuple? e11)
                                                         (tuple-ref e11 i12)
                                                         (if (dict? e11)
                                                           (dict-ref e11 i12)
                                                           (error
                                                            "cannot index object"))))))))))))
                                      (set! i (+ i 1)))))
                                 (loop))
                               (void))))
                         (loop)
                         (void)))))
                  (return res_str)))))))))
   (set! g$issubstring
     (lambda (s p)
       (call/ec
        (lambda (return)
          (let ((j (void)))
            (let ((c (void)))
              (let ((tmpl (void)))
                (let ((i (void)))
                  (begin
                    (set! i 0)
                    (set! tmpl (len p))
                    (call/ec
                     (lambda (break)
                       (let ((loop (void)))
                         (begin
                           (set! loop
                             (lambda ()
                               (if (<= i (- (len s) tmpl))
                                 (begin
                                   (call/ec
                                    (lambda (continue)
                                      (begin
                                        (set! j i)
                                        (call/ec
                                         (lambda (break)
                                           ((lambda ($seq19 $loop20)
                                              (begin
                                                (begin
                                                  (for-container
                                                   $seq19
                                                   $loop20)
                                                  (void))))
                                            p
                                            (lambda (i15)
                                              (call/ec
                                               (lambda (continue)
                                                 (begin
                                                   (set! c i15)
                                                   (begin
                                                     (if (not-equal?
                                                          c
                                                          (let ((e13 s))
                                                            (begin
                                                              (begin
                                                                (let ((i14 j))
                                                                  (begin
                                                                    (begin
                                                                      (if (py-list?
                                                                           e13)
                                                                        (py-list-ref
                                                                         e13
                                                                         i14)
                                                                        (if (tuple?
                                                                             e13)
                                                                          (tuple-ref
                                                                           e13
                                                                           i14)
                                                                          (if (dict?
                                                                               e13)
                                                                            (dict-ref
                                                                             e13
                                                                             i14)
                                                                            (error
                                                                             "cannot index object")))))))))))
                                                       (begin (break))
                                                       (begin
                                                         (set! j (+ j 1))
                                                         (if (equal?
                                                              (- j i)
                                                              tmpl)
                                                           (begin (return #t))
                                                           (void))))))))))))
                                        (set! i (+ i 1)))))
                                   (loop))
                                 (void))))
                           (loop)
                           (void)))))
                    (return #f))))))))))
   ((lambda ()
      (begin
        (set! g$Request
          (lambda (data)
            (call/ec
             (lambda (return)
               (let (($localo16
                      (dict
                       ("__class__" g$Request)
                       ("__type__" "instRequest"))))
                 (begin
                   ((get-field $localo16 "__init__") data)
                   (return $localo16)))))))
        (dict-set!
         gbl-dict
         g$Request
         (dict
          ("__base__" (list object))
          ("__class__" g$Request)
          ("__type__" "class")
          ("__init__"
           (lambda (self data)
             (call/ec
              (lambda (return) (begin (set-field! self "data" data))))))
          ("santinize_proc"
           (lambda (self)
             (call/ec
              (lambda (return)
                (let ((res (void)))
                  (begin
                    (set! res
                      (g$issubstring (get-field self "data") g$SCRIPT_PAT))
                    (if (equal? res #t)
                      (begin (set-field! self "data" (- 1)))
                      (void))))))))
          ("getData"
           (lambda (self)
             (call/ec
              (lambda (return) (begin (return (get-field self "data")))))))))
        (dict-set!
         (dict-ref gbl-dict g$Request)
         "__mro__"
         (list g$Request object)))))
   ((lambda ()
      (begin
        (set! g$Response
          (lambda (req)
            (call/ec
             (lambda (return)
               (let (($localo25
                      (dict
                       ("__class__" g$Response)
                       ("__type__" "instResponse"))))
                 (begin
                   ((get-field $localo25 "__init__") req)
                   (return $localo25)))))))
        (dict-set!
         gbl-dict
         g$Response
         (dict
          ("__base__" (list object))
          ("__class__" g$Response)
          ("__type__" "class")
          ("__init__"
           (lambda (self req)
             (call/ec
              (lambda (return)
                (begin
                  (set-field! self "result" (List (dict)))
                  (set-field! self "body" "")
                  (set-field! self "req" req))))))
          ("gen_body"
           (lambda (self)
             (call/ec
              (lambda (return)
                (let ((tmp (void)))
                  (let ((indx (void)))
                    (let ((len_res (void)))
                      (begin
                        (set! len_res (len (get-field self "result")))
                        (set! tmp "<div id= \"search_results\">\n<ol>)\n")
                        (if (equal? len_res 0)
                          (begin
                            (set-field!
                             self
                             "body"
                             (+
                              (+
                               tmp
                               "<h3>Your search did not return any results.</h3>")
                              (g$lst_to_str
                               ((get-field
                                 (get-field self "req")
                                 "getData"))))))
                          (void))
                        (set! indx 0)
                        (call/ec
                         (lambda (break)
                           (let ((loop (void)))
                             (begin
                               (set! loop
                                 (lambda ()
                                   (if (< indx len_res)
                                     (begin
                                       (call/ec
                                        (lambda (continue)
                                          (begin
                                            (set-field!
                                             self
                                             "body"
                                             (+
                                              (+
                                               (+
                                                (+
                                                 (+
                                                  (+
                                                   (+
                                                    (get-field self "body")
                                                    "<li <a href=\"test/")
                                                   (let ((e19
                                                          (let ((e17
                                                                 (get-field
                                                                  self
                                                                  "result")))
                                                            (begin
                                                              (begin
                                                                (let ((i18
                                                                       indx))
                                                                  (begin
                                                                    (begin
                                                                      (if (py-list?
                                                                           e17)
                                                                        (py-list-ref
                                                                         e17
                                                                         i18)
                                                                        (if (tuple?
                                                                             e17)
                                                                          (tuple-ref
                                                                           e17
                                                                           i18)
                                                                          (if (dict?
                                                                               e17)
                                                                            (dict-ref
                                                                             e17
                                                                             i18)
                                                                            (error
                                                                             "cannot index object"))))))))))))
                                                     (begin
                                                       (begin
                                                         (let ((i20 1))
                                                           (begin
                                                             (begin
                                                               (if (py-list?
                                                                    e19)
                                                                 (py-list-ref
                                                                  e19
                                                                  i20)
                                                                 (if (tuple?
                                                                      e19)
                                                                   (tuple-ref
                                                                    e19
                                                                    i20)
                                                                   (if (dict?
                                                                        e19)
                                                                     (dict-ref
                                                                      e19
                                                                      i20)
                                                                     (error
                                                                      "cannot index object")))))))))))
                                                  "?search=true&term=")
                                                 (g$lst_to_str
                                                  ((get-field
                                                    (get-field self "req")
                                                    "getData"))))
                                                "\">\n")
                                               (let ((e23
                                                      (let ((e21
                                                             (get-field
                                                              self
                                                              "result")))
                                                        (begin
                                                          (begin
                                                            (let ((i22 indx))
                                                              (begin
                                                                (begin
                                                                  (if (py-list?
                                                                       e21)
                                                                    (py-list-ref
                                                                     e21
                                                                     i22)
                                                                    (if (tuple?
                                                                         e21)
                                                                      (tuple-ref
                                                                       e21
                                                                       i22)
                                                                      (if (dict?
                                                                           e21)
                                                                        (dict-ref
                                                                         e21
                                                                         i22)
                                                                        (error
                                                                         "cannot index object"))))))))))))
                                                 (begin
                                                   (begin
                                                     (let ((i24 0))
                                                       (begin
                                                         (begin
                                                           (if (py-list? e23)
                                                             (py-list-ref
                                                              e23
                                                              i24)
                                                             (if (tuple? e23)
                                                               (tuple-ref
                                                                e23
                                                                i24)
                                                               (if (dict? e23)
                                                                 (dict-ref
                                                                  e23
                                                                  i24)
                                                                 (error
                                                                  "cannot index object")))))))))))
                                              "</a>\n"))
                                            (set! indx (+ indx 1)))))
                                       (loop))
                                     (void))))
                               (loop)
                               (void)))))
                        (set-field!
                         self
                         "body"
                         (+
                          (get-field self "body")
                          "</ol>\n</div>\n"))))))))))))
        (dict-set!
         (dict-ref gbl-dict g$Response)
         "__mro__"
         (list g$Response object)))))
   ((lambda ()
      (begin
        (set! g$Search
          (lambda (input)
            (call/ec
             (lambda (return)
               (let (($localo26
                      (dict ("__class__" g$Search) ("__type__" "instSearch"))))
                 (begin
                   ((get-field $localo26 "__init__") input)
                   (return $localo26)))))))
        (dict-set!
         gbl-dict
         g$Search
         (dict
          ("__base__" (list object))
          ("__class__" g$Search)
          ("__type__" "class")
          ("__init__"
           (lambda (self input)
             (call/ec
              (lambda (return)
                (begin
                  (set-field! self "resp" (g$Response (g$Request input))))))))
          ("doSearch"
           (lambda (self)
             (call/ec
              (lambda (return)
                (let ((l (void)))
                  (begin
                    ((get-field
                      (get-field (get-field self "resp") "req")
                      "santinize_proc"))
                    (if (equal?
                         ((get-field
                           (get-field (get-field self "resp") "req")
                           "getData"))
                         (- 1))
                      (begin (py-print "no scripting allowed") (return (void)))
                      (void))
                    (set! l
                      (len
                       ((get-field
                         (get-field (get-field self "resp") "req")
                         "getData"))))
                    (if (> l 3)
                      (begin
                        (set-field!
                         (get-field self "resp")
                         "result"
                         (List (dict))))
                      (begin
                        (set-field!
                         (get-field self "resp")
                         "result"
                         (List
                          (dict
                           (0 (tuple (dict (0 "Colors") (1 "colors.html"))))
                           (1 (tuple (dict (0 "Numbers") (1 "numbers.html"))))
                           (2
                            (tuple
                             (dict
                              (0 "Numbers and Colors")
                              (1 "numbersandcolors.html"))))
                           (3
                            (tuple
                             (dict
                              (0 "Numbers and Colors With Tag")
                              (1 "numbersandcolorswithtag.html")))))))))
                    ((get-field (get-field self "resp") "gen_body"))))))))
          ("render"
           (lambda (self)
             (call/ec
              (lambda (return)
                (begin
                  (py-print (get-field (get-field self "resp") "body")))))))))
        (dict-set!
         (dict-ref gbl-dict g$Search)
         "__mro__"
         (list g$Search object)))))
   (set! g$test_init_input
     (lambda ()
       (call/ec
        (lambda (return)
          (let ((simulated_cgi_entry1 (void)))
            (begin
              (set! simulated_cgi_entry1
                (dict
                 ("terms" (List (dict (0 "red") (1 "blue") (2 "three"))))
                 ("boolean" g$OR)
                 ("case" g$CASE_SENSITIVE)
                 ("files"
                  (List
                   (dict
                    (0 "colors.html")
                    (1 "numbers.html")
                    (2 "numbersandcolors.html")
                    (3 "numbersandcolorswithtag.html"))))))
              (return
               (let ((e27 simulated_cgi_entry1))
                 (begin
                   (let ((i28 "terms"))
                     (begin
                       (if (py-list? e27)
                         (py-list-ref e27 i28)
                         (if (tuple? e27)
                           (tuple-ref e27 i28)
                           (if (dict? e27)
                             (dict-ref e27 i28)
                             (error "cannot index object")))))))))))))))
   (set! g$mock_mal_strlst
     (lambda ()
       (call/ec
        (lambda (return)
          (begin
            (return
             (List
              (dict
               (0 "e")
               (1 "<")
               (2 "s")
               (3 "c")
               (4 "r")
               (5 "i")
               (6 "p")
               (7 "t")
               (8 ">")))))))))
   (set! g$gen_malicious_input
     (lambda ()
       (call/ec
        (lambda (return)
          (let ((simulated_cgi_entry2 (void)))
            (begin
              (set! simulated_cgi_entry2 (dict ("terms" (g$mock_mal_strlst))))
              (return
               (let ((e29 simulated_cgi_entry2))
                 (begin
                   (let ((i30 "terms"))
                     (begin
                       (if (py-list? e29)
                         (py-list-ref e29 i30)
                         (if (tuple? e29)
                           (tuple-ref e29 i30)
                           (if (dict? e29)
                             (dict-ref e29 i30)
                             (error "cannot index object")))))))))))))))
   (set! g$srch1 (g$Search (g$test_init_input)))
   ((get-field g$srch1 "doSearch"))
   ((get-field g$srch1 "render"))
   (set! g$srch2 (g$Search (g$gen_malicious_input)))
   ((get-field g$srch2 "doSearch"))
   ((get-field g$srch2 "render"))))
